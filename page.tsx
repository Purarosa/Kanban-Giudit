"use client"

import { DialogTrigger } from "@/components/ui/dialog"

import { useState, useEffect } from "react"
import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd"
import { Plus, Printer, Package, CheckCircle, AlertCircle, Trash2, MessageSquare, Layers } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

// Product database with SKU codes and descriptions
const productDatabase: Record<string, string> = {
  "1": "CC CREAM LEAVE-IN UNIVERSAL HAPPY END OLENKA 250mL",
  "1044": "PROTEIN  ANTI FRIZZ BLUE ACTIVE 500ML",
  "1052": "HEALTHY SMOOTH PRO THERAPY 1L",
  "1057": "SHAMPOO HIDRATANTE JABORANDI E ARNICA LINDERM 1L",
  "1058": "SHAMPOO HIDRATANTE JABORANDI E ARNICA LINDERM 2L",
  "1060": "SHAMPOO HIDRATANTE LIMÃO E GELEIA REAL LINDERM 1L",
  "1061": "SHAMPOO HIDRATANTE LIMÃO E GELEIA REAL LINDERM 2L",
  "1063": "SHAMPOO HIDRATANTE MANDIOCA E BIOTINA LINDERM 1L",
  "1072": "MULTI OIL TREATMENT DR. HAIR COLLAGEN COSMA SECRETS 100ML",
  "1075": "DR. HAIR COLLAGEN COSMA SECRETS DEEP MASK 500G",
  "1088": "CONDICONADOR MURUMURU RIQUEZAS DA TERRA HAIR PRINCESS 300mL",
  "1089": "MASK MURUMURU RIQUEZAS DA TERRA HAIR PRINCESS 250g",
  "1090": "SHAMPOO MURUMURU RIQUEZAS DA TERRA HAIR PRICESS 300mL",
  "1093": "LEAVE-IN BRUME CREAM RÍGEL 250mL",
  "1095": "SHAMPOO DETOX KERASTINNI HAIR COSMÉTIC 1L",
  "1109": "OIL THERAPY CONDITIONER FSH FIRST SILKY HAIR PLUS 300ML",
  "1111": "OIL THERAPY SHAMPOO FSH FIRST SILKY HAIR PLUS 300ML",
  "1120": "SABONETE HIDRATANTE NEUTRO SEM PERFUME LINDERM 500ML",
  "1121": "SABONETE HIDRATANTE NEUTRO LINDERM 500ML",
  "1122": "SABONETE HIDRATANTE LIMÃO SICILIANO E GENGIBRE LINDERM 500ML",
  "1146": "SABONETE HIDRATANTE CAPIM LIMÃO E BERGAMOTA LINDERM 1L",
  "1147": "SABONETE HIDRATANTE CAPIM LIMÃO E BERGAMOTA LINDERM 2L",
  "1149": "SABONETE HIDRATANTE LIMÃO SICILIANO E GENGIBRE LINDERM 2L",
  "1150": "SABONETE HIDRATANTE NEUTRO SEM PERFUME  LINDERM 2L",
  "1152": "SABONETE HIDRATANTE NEUTRO LINDERM 1L",
  "1153": "SABONETE HIDRATANTE NEUTRO LINDERM 2L",
  "1160": "ALINHAMENTO CAPILAR DE ALTA PERFORMANCE ÉPOS HECTORY COSMETICS 1L",
  "1161": "ATIVADOR DE CACHOS SECRET CURL HAPPY END OLENKA 200ML",
  "1167": "SHAMPOO HIDRATANTE BABOSA E ARGAN LINDERM 1L",
  "1168": "ESPUMA ANTISSÉPTICA HAPPIE HAPPIE 50ML",
  "1172": "SHAMPOO HIDRATANTE CERAMIDAS E ÔMEGA 3 LINDERM 1L",
  "12": "CONDICIONADOR DE TRATAMENTO ESPECIALIDADES OLENKA 1,5L",
  "1209": "CONDICIONADOR HIDRATANTE JABORANDI E ARNICA LINDERM 2L",
  "1218": "CONDICIONADOR HIDRATANTE MANDIOCA E BIOTINA LINDERM 2L",
  "123": "CONDICIONADOR HIDRATANTE BABOSA E ARGAN LINDERM 2L",
  "1256": "SHAMPOO HIDRATANTE COCO E SILICONES NOBRES LINDERM 1L",
  "126": "CONDICIONADOR HIDRATANTE CERAMIDAS E ÔMEGA 3 LINDERM 2L",
  "1267": "ALISANTE CAPILAR 6x1 THERAPY LISS 1L",
  "1268": "ALISANTE CAPILAR 6x1 THERAPY LISS 150g",
  "1287": "MÁSCARA CAPILAR NANO PROTEIC TREATMENT RÍGEL 300G",
  "1289": "CONDICIONADOR HIDRATANTE LIMÃO E GELÉIA REAL LINDERM 2L",
  "129": "CONDICIONADOR HIDRATANTE COCO E SILICONES NOBRES LINDERM 2L",
  "1298": "MÁSCARA DE NUTRIÇÃO E REGENERAÇÃO BANHO DE COLÁGENO OLENKA 220g",
  "13": "SHAMPOO DE TRATAMENTO ESPECIALIDADES OLENKA 1,5L",
  "132": "CONDICIONADOR HIDRATANTE LEITE DE AMÊNDOAS E AVEIA LINDERM  2L",
  "1337": "SPRAY ANTISSÉPTICO HIGIENIZANTE LINDERM 500ML",
  "1338": "SHAMPOO HIDRATANTE LEITE DE AMÊNDOAS E AVEIA LINDERM 1L",
  "1339": "SHAMPOO HIDRATANTE MANTEIGA DE KARITÉ E MACADÂMIA LINDERM 1L",
  "1340": "SHAMPOO HIDRATANTE NEUTRO LINDERM 1L",
  "1341": "ESPUMA ÍNTIMA HAPPIE 50ML",
  "135": "CONDICIONADOR HIDRATANTE MANTEIGA DE KARITÉ E MACADÂMIA LINDERM  2L",
  "138": "CONDICIONADOR HIDRATANTE  NEUTRO LINDERM 2L",
  "1412": "THERAPY BRAZILIAN HAIR 250ML",
  "1414": "CONDICIONADOR HIDRATANTE BABOSA E ARGAN LINDERM 1L",
  "1415": "SABONETE HIDRATANTE ERVA DOCE E HORTELÃ LINDERM 1L",
  "1416": "SABONETE HIDRATANTE LAVANDA E ALECRIM LINDERM 1L",
  "1429": "PROTEIN MULTI-COLOUR NANO FILLER BRASILEIRA 1L",
  "1434": "SHAMPOO ANTI-RESIDUO BRASILEIRA 1L",
  "146": "SABONETE ANTISSÉPTICO NEUTRO LINDERM  2L",
  "1464": "ORGANIC PROTEIN CAVIAR THERAPY 1L",
  "15": "ÓLEO DE REPARAÇÃO HAPPY END OLENKA 60mL",
  "153": "SABONETE HIDRATANTE ALGAS MARINAS E ALGODÃO LINDERM 500mL",
  "1548": "SABONETE HIDRATANTE MORANGO E CHAMPAGNE LINDERM 1L",
  "155": "SABONETE HIDRATANTE ALGAS MARINAS E ALGODÃO LINDERM 2L",
  "156": "SABONETE HIDRATANTE ERVA DOCE E HORTELÃ LINDERM 500mL",
  "1579": "ESPUMA FACIAL PELE SENSÍVEL HAPPIE 50ML",
  "158": "SABONETE HIDRATANTE ERVA DOCE E HORTELÃ LINDERM  2L",
  "160": "SABONETE HIDRATANTE LAVANDA E ALECRIM LINDERM 500mL",
  "1613": "HAIR RECONSTRUCTOR BRASILEIRA 250ML",
  "162": "SABONETE HIDRATANTE LAVANDA E ALECRIM LINDERM  2L",
  "163": "SABONETE HIDRATANTE LICHIA E BAUNILHA LINDERM 500mL",
  "165": "SABONETE HIDRATANTE LICHIA E BAUNILHA LINDERM 2L",
  "1651": "CONDICIONADOR HIDRATANTE BABOSA E ARGAN LINDERM 5L",
  "1652": "SHAMPOO HIDRATANTE BABOSA E ARGAN LINDERM 5L",
  "1653": "SHAMPOO HIDRATANTE CERAMIDAS E ÔMEGA 3 LINDERM 5L",
  "1654": "CONDICIONADOR HIDRATANTE CERAMIDAS E ÔMEGA 3 LINDERM 5L",
  "1655": "CONDICIONADOR HIDRATANTE JABORANDI E ARNICA LINDERM 5L",
  "1656": "SHAMPOO HIDRATANTE NEUTRO LINDERM 5L",
  "1657": "SHAMPOO HIDRATANTE MANDIOCA E BIOTINA LINDERM 5L",
  "166": "SABONETE HIDRATANTE MARACUJÁ E CAMOMILA LINDERM 500mL",
  "1679": "SABONETE HIDRATANTE ALGAS MARINAS E ALGODÃO LINDERM 1L",
  "168": "SABONETE HIDRATANTE MARACUJÁ E CAMOMILA LINDERM 2L",
  "1680": "SABONETE HIDRATANTE LICHIA E BAUNILHA LINDERM 1L",
  "1681": "SHAMPOO ANTI-RESÍDUOS LINDERM 1L",
  "1682": "SHAMPOO HIDRATANTE COCO E SILICONES NOBRES LINDERM 5L",
  "1683": "SHAMPOO HIDRATANTE MANTEIGA DE KARITÉ E MACADÂMIA LINDERM 5L",
  "169": "SABONETE HIDRATANTE MORANGO E CHAMPAGNE LINDERM 500mL",
  "1707": "SHAMPOO HIDRATANTE JABORANDI E ARNICA LINDERM 5L",
  "171": "SABONETE HIDRATANTE MORANGO E CHAMPAGNE LINDERM 2L",
  "1719": "SABONETE HIDRATANTE ERVA DOCE E HORTELÃ LINDERM 5L",
  "174": "SHAMPOO ANTI-RESÍDUOS LINDERM 2L",
  "1748": "MÁSCARA BLOND PLATINUM BRAZILIAN COLOR NATUREZA 300G",
  "1749": "MÁSCARA SILVER BLACK BRAZILIAN COLOR NATUREZA 300G",
  "177": "SHAMPOO HIDRATANTE BABOSA E ARGAN LINDERM 2L",
  "1774": "SHAMPOO HIDRATANTE LIMÃO E GELEIA REAL LINDERM 5L",
  "1775": "SABONETE HIDRATANTE MARACUJÁ E CAMOMILA LINDERM 1L",
  "1776": "SHAMPOO HIDRATANTE LEITE DE AMÊNDOAS E AVEIA LINDERM 5L",
  "18": "SPRAY DE ALTO BRILHO HAPPY END OLENKA 60ML",
  "180": "SHAMPOO HIDRATANTE CERAMIDAS E ÔMEGA 3 LINDERM  2L",
  "1811": "CONDICIONADOR HIDRATANTE LIMÃO E GELÉIA REAL LINDERM 5L",
  "1812": "CONDICIONADOR HIDRATANTE MANDIOCA E BIOTINA LINDERM 5L",
  "1813": "SHAMPOO ANTI-RESÍDUOS LINDERM 5L",
  "1814": "TÔNICO ANTI-QUEDA FEMININO GROWTH SPLASH OLENKA 100ML",
  "183": "SHAMPOO HIDRATANTE COCO E SILICONES NOBRES LINDERM  2L",
  "1834": "SHAMPOO INTENSE LIZZ KERASTINNI HAIR COSMÉTIC 750ML",
  "1838": "HIDRATANTE DIÁRIO ANTIPOLUIÇÃO COLLAGEN D ANDINA PATAGONY COSMETICS 30ML",
  "1841": "ESPUMA FACIAL C/ ESPONJINHA  HAPPIE 150ML",
  "1842": "ESPUMA FACIAL PELE SENSÍVEL  C/ ESPONJINHA HAPPIE 150ML",
  "1843": "CONDICIONADOR HIDRATANTE CERAMIDAS E ÔMEGA 3 LINDERM 1L",
  "1845": "CONDICIONADOR HIDRATANTE NEUTRO LINDERM 1L",
  "1846": "SHAMPOO HIDRATANTE MANTEIGA DE KARITÉ E MACADÂMIA LINDERM 2L",
  "1847": "SABONETE HIDRATANTE NEUTRO LINDERM 5L",
  "186": "SHAMPOO HIDRATANTE LEITE DE AMÊNDOAS E AVEIA LINDERM  2L",
  "19": "DUAL MASK HIDRA 3 OLENKA 500ML",
  "192": "SHAMPOO HIDRATANTE NEUTRO LINDERM  2L",
  "1921": "CONDICIONADOR HIDRATANTE MANTEIGA DE KARITÉ E MACADÂMIA LINDERM 5L",
  "20": "SHAMPOO HIDRATANTE HIDRA 3 ́ OLENKA 500ML",
  "200": "ACIDIFICANTE PH BALANCER  ELPÉROLA EL 1L",
  "2006": "CREME DE MASSAGEM CORPORAL PERFECT SPA ANDINA PATAGONY COSMETICS 1KG",
  "21": "WEB MASK HIDRA 3 ́ OLENKA 500G",
  "22": "BALM PRÉ E PÓS BARBA 2X1 MENS CARE OLENKA 300ML",
  "23": "CONDICIONADOR REVITALIZANTE DE TRATAMENTO MEN ́S CARE OLENKA 1,5L",
  "233": "ATIVADOR DE CACHOS CURLY PRINCESS HAIR PRINCESS 500ML",
  "24": "CONDICIONADOR REVITALIZANTE DE TRATAMENTO MEN S CARE OLENKA 300ML",
  "258": "THERMAL SEALING PRO HAIRMONY 1L",
  "26": "POMADA DE FINALIZAÇÃO COM BRILHO MEN ́S CARE OLENKA 80G",
  "28": "SHAMPOO PURIFICANTE DE TRATAMENTO MEN ́S CARE OLENKA 1,5L",
  "29": "SHAMPOO PURIFICANTE DE TRATAMENTO MEN ́S CARE OLENKA 300ML",
  "3016": "NATURAL SYSTEM MILK BRUSH PROTEIN 1L",
  "3025": "ÓLEO DE ARGAN LINDERM 60ML",
  "3026": "QUERATINA LÍQUIDA LINDERM 200ML",
  "3030": "SHAMPOO NANO PROTEIC TREATMENT RÍGEL 1L",
  "3031": "CONDICIONADOR NANO PROTEIC TREATMENT RÍGEL 300ML",
  "3032": "MÁSCARA CAPILAR NANO PROTEIC TREATMENT RÍGEL 1KG",
  "3033": "SHAMPOO NANO PROTEIC TREATMENT RÍGEL 300ML",
  "3035": "SHAMPOO FORÇA E VITALIDADE BABOSA VIZBELLE 300ML",
  "3036": "CONDICIONADOR FORÇA E VITALIDADE BABOSA VIZBELLE 300ML",
  "3041": "POMADA MODELADORA EFEITO SECO LINDERM 130G",
  "3042": "ÓLEO DE ROSA MOSQUETA FAMIVITA 30ML",
  "3067": "MASK BIO EXTREME MARY VARGAS 1L",
  "3069": "PROTEIN NANO FILLER BRASILEIRA 1L",
  "3090": "MÁSCARA CAPILAR OLEOTERAPIA KERASTINNI HAIR COSMÉTIC 500G",
  "3111": "REGENERADOR DE UNHAS FRACAS FUNGFREE EFICAZ NUCORP 20ML",
  "3115": "REALINHAMENTO TÉRMICO AMINO BLEND LISS REPAIR HONEYMOON 1L",
  "3117": "MÁSCARA PH AMINO BLEND LISS REPAIR HONEYMOON 300mL",
  "3158": "BRAZILIAN PROTEIN MURUMURU RIQUEZAS DA AMAZÔNIA HAIR PRINCESS 1L",
  "3161": "CERA VEGAN THERAPY VAIOLLE 500ML",
  "3162": "SHAMPOO VEGAN THERAPY VAIOLLE 500ML",
  "3163": "SABONETE LÍQUIDO ERVA DOCE LINDERM 5L",
  "3168": "OFF CREAM CANVENSE 500ML",
  "3169": "ONFUSION CANVENSE 1L",
  "3170": "MASQUE ÁGUA DE BRILHO CANVENSE 500g",
  "3171": "PLATINUM EFFECT MASK LUX ANGEL CANVENSE 500ML",
  "3172": "PEARL EFFECT MASK LUX ANGEL CANVENSE 500ML",
  "3174": "NATURAL OILS AMAZONIAN HAIR 150ML",
  "3183": "SHAMPOO HIDRATANTE ELGALON HIDRATION EL 2,5L",
  "3184": "CONDITIONER & MASK HIDRATANTE ELGALON HIDRATION EL 2,5L",
  "3194": "FLUÍDO FINALIZADOR VITALY CANVENSE 200ML",
  "3201": "SHAMPOO BLOND PLATINUM BRAZILIAN COLOR NATUREZA 300ML",
  "3211": "VITAMINA C ESTABILIZADA GLACIAL C ANDINA PATAGONY COSMETICS 30ML",
  "3214": "REPARADOR DE PONTAS NM NATH MINATTO 30mL",
  "3238": "VIZ PARFUM ONE VIZBELLE 60ML",
  "3243": "ESPUMA ÍNTIMA SEM ENXÁGUE HAPPIE 150ML",
  "3244": "MATIZADOR PLATINUM BLACK AMASING 250G",
  "3245": "REALINHAMENTO DOS FIOS EXPERT NANOLISS BLOND RÍGEL 1L",
  "3249": "SHAMPOO NUTRITIVO OLEOTERAPIA KERASTINNI HAIR COSMETIC 500ML",
  "3251": "BLOQUEADOR TÉRMICO KERASTINNI HAIR COSMÉTIC 200ML",
  "3252": "CREME DENTAL OZONIZADO NATUOZ ATLÂNTICA NATURAL 90G",
  "3254": "DESODORANTE SEM ALUMÍNIO OZONIZADO NATUOZ ATLÂNTICA NATURAL 50ML",
  "3266": "SHAMPOO THERAPY DAY RÍGEL 1L",
  "3267": "DUAL MASK THERAPY DAY RÍGEL 1KG",
  "3269": "BELLE OIL RENOAH 25ML",
  "3270": "MUTAMBA OIL KERASTINNI HAIR COSMÉTIC 60ML",
  "3306": "GELÉIA MODELADORA SYRCSYM 500G",
  "3327": "ESPUMA ÍNTIMA SEM ENXÁGUE HAPPIE 50ML",
  "333": "MÁSCARA PROGRESSIVA GLAMUROSA PERSONALITIES 1,5L",
  "3334": "CONDICIONADOR HIDRATANTE COCO E SILICONES NOBRES LINDERM 1L",
  "3335": "CONDICIONADOR HIDRATANTE COCO E SILICONES NOBRES LINDERM 5L",
  "3360": "MÁSCARA MATIZADORA BLOND CARE RENOAH 500G",
  "3366": "CONDITIONER RESTORE MACADAMIA LAMA 500ML",
  "3372": "PROTEIN HAIR RESTORE MACADAMIA LAMA 200ML",
  "3374": "SHAMPOO CLARIFYING MACADAMIA LAMA 200ML",
  "3375": "SHAMPOO CLARIFYING MACADAMIA LAMA 500ML",
  "3376": "SHAMPOO RESTORE MACADAMIA LAMA 500ML",
  "3398": "MÁSCARA SELADORA INTENSE LIZZ KERASTINNI HAIR COSMÉTIC 1kg",
  "3490": "CONDICIONADOR HIDRATANTE LEITE DE AMÊNDOAS E AVEIA LINDERM 5L",
  "3491": "CONDICIONADOR HIDRATANTE NEUTRO LINDERM 5L",
  "3505": "GLOSS REDUTOR SEMPRE LIZZA 1L",
  "3515": "ANTIFRIZZ MASK BANA LA PERLE BANA 1L",
  "354": "MÁSCARA HIDRATANTE MATIZADORA BLACK BLUE UNILISS 500G",
  "3578": "REMAKE LEAVE-IN NM NATH MINATTO 300G",
  "3659": "BTOX CENOURA NATUREZA BR 1Kg",
  "3660": "BTOX CENOURA ROXA BLOND PLATINUM NATUREZA BR 1Kg",
  "3661": "ESCOVA DE LEITE NATURAL THERAPY NATUREZA BR 1L",
  "367": "MÁSCARA MATIZANTE EFEITO PEROLADO VIZ COLOR VIZBELLE 300G",
  "3677": "SHAMPOO DETOX FABULOSA LIZZ KAIRÓS 450mL",
  "368": "MÁSCARA MATIZANTE EFEITO PLATINADO VIZ COLOR VIZBELLE 300G",
  "370": "SHAMPOO MATIZANTE EFEITO PLATINADO VIZ COLOR VIZBELLE 300ML",
  "3705": "ACIDIFICANTE CAPILAR RESET VICTORIE ROYALE 1L",
  "3709": "RECONSTRUTOR CAPILAR MULTIBENEFÍCIOS INTENSE KERATIN VICTORIE ROYALE 250mL",
  "3802": "BLEND DE PROTEINAS OLENKA D 220g",
  "3807": "ALISANTE CAPILAR ROYAL LOOK OLENKA D 1LT",
  "3808": "ALISANTE CAPILAR ROYAL LOOK OLENKA D 180ML",
  "3809": "GLOSS DE REESTRUTURAÇÃO BIO RECONSTRUTOR OLENKA D 500ML",
  "3810": "ALISANTE CAPILAR ROYAL SOFT OLENKA D 1KG",
  "3811": "SPRAY DE REGENERAÇÃO BIO RECONSTRUTOR OLENKA D 500ML",
  "3812": "SHAMPOO MANUTENÇÃO DO LISO SELF CARE OLENKA D 280ML",
  "3813": "MÁSCARA DE NUTRIÇÃO E REGENERAÇÃO BANHO DE COLÁGENO OLENKA D 220G",
  "3814": "SHAMPOO DILATADOR ROYAL LOOK OLENKA D 1LT",
  "3815": "TÔNICO ANTI-QUEDA FEMININO GROWTH SPLASH OLENKA D 100ML",
  "3816": "SHAMPO DILATADOR ROYAL LOOK OLENKA D 120ML",
  "3817": "SHAMPOO REGENERAÇÃO INTENSA SELF CARE OLENKA D 280ML",
  "3818": "DUAL MOUSSE MANUTENÇÃO DO LISO SELF CARE OLENKA D 250G",
  "3820": "ATIVADOR DE CACHOS SECRET CURL HAPPY AND OLENKA D 200ML",
  "3823": "ULTRA DEFENSE BLOND PLEX OLENKA D 250ML",
  "3824": "ÓLEO DE REPARAÇÃO HAPPY END OLENKA D 60ML",
  "3826": "DUAL MOUSSE REGENERAÇÃO INTENSA SELF CARE OLENKA D 250G",
  "3827": "BLEND DE PROTEINAS OLENKA D 600g",
  "3829": "MÁSCARA UNIVERSAL PRO ROYAL FINISH OLENKA D 500G",
  "3830": "CONDICIONADOR DE TRATAMENTO ESPECIALIDADES OLENKA D 1,5L",
  "3831": "DUAL MASK HIDRA 3 OLENKA D 500ML",
  "3832": "SHAMPOO DE TRATAMENTO ESPECIALIDADES OLENKA D 1,5L",
  "3837": "SHAMPOO PURIFICANTE DE TRATAMENTO MEN ́S CARE OLENKA D 300ML",
  "3838": "CONDICIONADOR REVITALIZANTE DE TRATAMENTO MEN ́S CARE OLENKA D 300ML",
  "3841": "SHAMPOO PROTEÇÃO DE LOIROS SELF CARE OLENKA D 280ML",
  "3844": "DUAL MOUSSE PROTEÇÃO DE LOIROS SELF CARE OLENKA D 250G",
  "3847": "SPRAY DE CORREÇÃO DA COR ROYAL BLOND OLENKA D 250ML",
  "3850": "CONDICIONADOR ALHESE CARLESE 1,5L",
  "3854": "MÁSCARA DE TRATAMENTO ALHESE CARLESE 2,3kg",
  "3857": "SHAMPOO ALHESE CARLESE 1,5L",
  "3881": "NO FRIZZ MÁSCARA RECONSTRUTORA 6X1 THERAPY LISS KARIZMA COLLECTION 150g",
  "3917": "SHAMPOO HIDRATANTE HIDRA 3 ́ OLENKA D 500ML",
  "3918": "CC CREAM LEAVE-IN UNIVERSAL HAPPY AND OLENKA D 250ML",
  "3921": "SHAMPOO CABELOS CACHEADOS SELF CARE OLENKA D 280ML",
  "3922": "DUAL MOUSSE CABELOS CACHEADOS SELF CARE OLENKA D 250G",
  "3924": "SHAMPOO PURIFICANTE DE TRATAMENTO MEN ́S CARE OLENKA D 1,5L",
  "3925": "BALM PRÉ E PÓS BARBA 2X1 MENS CARE OLENKA D 300ML",
  "3927": "BLEND DE PROTEINAS OLENKA D 50g",
  "3953": "SHAMPOO REFRESCANTE 3X1 MEN ́S CARE LINDERM 1L",
  "3955": "FLUÍDO PROTETOR ASKUA PROTECTION MAGIC LISS DONNA INDIANA 250mL",
  "3957": "SÉRUM OZONIZADO ANDREZA GOULART 30mL",
  "4003": "CONDICIONADOR REVITALIZANTE DE TRATAMENTO MEN ́S CARE OLENKA D 1,5L",
  "402": "GELATINA GREEN APPLE HIDRATAÇÃO PROFUNDA LOVE POTION 1KG",
  "403": "GELATINA GREEN APPLE HIDRATAÇÃO PROFUNDA LOVE POTION 300g",
  "404": "GELATINA HIDRATANTE CAPILAR LOVE POTION 1KG",
  "4044": "CONDITIONER HOME-CARE BIO HAIR 500mL",
  "4046": "SELANTE CAPILAR LINCYLOVE 300mL",
  "4047": "SHAMPOO ANTI-RESÍDUO LINCYLOVE 300mL",
  "406": "GELATINA HIDRATANTE CAPILAR MATIZADORA LOVE POTION 1KG",
  "407": "GELATINA HIDRATANTE CAPILAR MATIZADORA LOVE POTION 300G",
  "4072": "MÁSCARA RECONSTRUTORA ULTRA-HIDRATANTE TEIA IMPACT POWER HELLCA 1Kg",
  "411": "VINAGRE CAPILAR DE MAÇA MAGIC POTION LOVE POTION 500ML",
  "4120": "SUPER HYDRATION SPECIAL REPAIR PRIAMON 1Kg",
  "4127": "ESPUMA FACIAL DE LIMPEZA E BARBEAR HAPPIE 50mL",
  "413": "S.O.S. EM GEL I LOVE BABOSA LOVE POTION 200ML",
  "4186": "PROTEÍNA DE REESTRUTURAÇÃO E FINALIZAÇÃO BANHO DE COLÁGENO OLENKA 200mL",
  "4188": "ALINHAMENTO TÉRMICO FABULOSA LIZZ KAIRÓS 1L",
  "4189": "SHAMPOO DETOX FABULOSA LIZZ KAIRÓS 1L",
  "4235": "MÁSCARA MULTI-BENEFÍCIOS BANHO DE DIAMOND THAIS RODRIGUES 300g",
  "4259": "LOÇÃO HIDRATANTE DESODORANTE CORPORAL FORTUNE DEO BEAUTY 200mL",
  "4268": "CONDICIONADOR PREMIUM ÉCLAT PURE SYRCSYM 1L",
  "4271": "SHAMPOO PREMIUM ÉCLAT PURE SYRCSYM 1L",
  "45": "ALISANTE CAPILAR ROYAL LOOK OLENKA 1L",
  "46": "ALISANTE CAPILAR ROYAL SOFT OLENKA 1KG",
  "463": "SHAMPOO MURUMURU RIQUEZAS DA TERRA HAIR PRINCESS 1L",
  "464": "MASK MURUMURU RIQUEZAS DA TERRA HAIR PRINCESS 1KG",
  "465": "CONDICIONADOR MURUMURU RIQUEZAS DA TERRA HAIR PRINCESS 1L",
  "4764": "PROTEÍNA DE REESTRUTURAÇÃO E FINALIZAÇÃO BANHO DE COLÁGENO OLENKA D 200mL",
  "478": "ABSOLUTY SMOOTH LISSELINI YAVANNA 1,25L",
  "48": "MÁSCARA UNIVERSAL PRO ROYAL FINISH OLENKA 500G",
  "4874": "MASQUE ÁGUA DE BRILHO CANVENSE 300mL",
  "4875": "SHAMPOO ÁGUA DE BRILHO CANVENSE 300mL",
  "4876": "SHAMPOO QUELANTE AS PRIME CANVENSE 300mL",
  "4877": "GLOSS AS PRIME CANVENSE 300mL",
  "4894": "MÁSCARA DE REVITALIZAÇÃO LOIRO PLATINADO OLENKOLOR OLENKA D 250mL",
  "4895": "MÁSCARA DE REVITALIZAÇÃO LOIRO INTENSO OLENKOLOR OLENKA D 250mL",
  "4896": "MÁSCARA DE REVITALIZAÇÃO LOIRO DOURADO OLENKOLOR OLENKA D 250mL",
  "4897": "MÁSCARA DE REVITALIZAÇÃO MORENAS ILUMINADAS CARAMELO OLENKOLOR OLENKA D 250mL",
  "4898": "MÁSCARA DE REVITALIZAÇÃO LOIRO PRATEADO OLENKOLOR OLENKA D 250mL",
  "4899": "MÁSCARA DE RECONSTRUÇÃO E RECUPERAÇÃO BIO RECONSTRUTOR OLENKA D 250mL",
  "49": "SHAMPOO DILATADOR ROYAL LOOK OLENKA 1L",
  "4931": "PROGRESS MASK HELLCA 300mL",
  "4950": "RECONSTRUCTOR CC CREAM CURL+ MONA 250mL",
  "4978": "CONDICIONADOR HIDRATANTE SPECIAL CARE LINE PRIAMON 1,5L",
  "4979": "SHAMPOO SPECIAL CARE LINE PRIAMON 1,5L",
  "4986": "HAIR TEXTURIZER ST LINE 1L",
  "4988": "POMADA DE FINALIZAÇÃO SECA HAPPY END OLENKA 60g",
  "5": "GLOSS DE REESTRUTURAÇÃO BIO RECONSTRUTOR OLENKA 500ML",
  "50": "SPRAY DE CORREÇÃO DA COR ROYAL BLOND OLENKA 250ML",
  "5000": "STANDARD MOISTURIZER SHEA BUTTER SHAMPOO CURL+ MONA 250mL",
  "5008": "EAU PARFUM FEMME 17 NATUAMBER ATL 15mL",
  "5009": "EAU PARFUM FEMME 14 NATUANGEL ATL 15mL",
  "5010": "EAU PARFUM HOMME 6 NATUACQUA ATL 15mL",
  "5011": "EAU PARFUM HOMME 21 NATUASAD ATL 15mL",
  "5012": "EAU PARFUM HOMME 20 NATUAVENTUS ATL 15mL",
  "5013": "EAU PARFUM FEMME 2 NATUBELLE ATL 15mL",
  "5014": "EAU PARFUM FEMME 3 NATUDIOR ATL 15mL",
  "5015": "EAU PARFUM FEMME 5 NATUDORE ATL 15mL",
  "5016": "EAU PARFUM FEMME 16 NATUFAME ATL 15mL",
  "5017": "EAU PARFUM FEMME 1 NATUGIRLS ATL 15mL",
  "5018": "EAU PARFUM HOMME 10 NATUMALE ATL 15mL",
  "5019": "EAU PARFUM HOMME 2 NATUMILLION ATL 15mL",
  "5020": "EAU PARFUM FEMME 4 NATUPEA ATL 15mL",
  "5021": "EAU PARFUM HOMME 14 NATUROYAL ATL 15mL",
  "5022": "EAU PARFUM FEMME 7 NATUSCAN ATL 15mL",
  "5023": "EAU PARFUM HOMME 16 NATUSCANMEN ATL 15mL",
  "5024": "EAU PARFUM HOMME 18 NATUTOM ATL 15mL",
  "5025": "EAU PARFUM HOMME 7 NATUVICTUS ATL 15mL",
  "5026": "EAU PARFUM HOMME 17 NATUWANTED ATL 15mL",
  "5027": "EAU PARFUM FEMME 15 NATUYES ATL 15mL",
  "5028": "SHAMPOO 3 EM 1 MEN MEMBER ́S MARK 1L",
  "504": "BLEND DE PROTEÍNAS OLENKA 50g",
  "505": "BLEND DE PROTEÍNAS OLENKA 220g",
  "5053": "REMAKE LEAVE-IN NM NATH MINATTO 180mL",
  "506": "ALISANTE CAPILAR ROYAL LOOK OLENKA 180ML",
  "5062": "STANDARD MOISTURIZER SHEA BUTTER CONDITIONER CURL+ MONA 250mL",
  "5066": "SÉRUM RECONSTRUTOR KERASTINNI 1L",
  "507": "SHAMPOO DILATADOR ROYAL LOOK OLENKA 120ML",
  "5074": "ESPUMA ANTISSÉPTICA HAPPIE HAPPIE A GRANEL",
  "5076": "HAIR PLASTIC SURGERY BTX DIVINE FIOS DIVINE 300ML",
  "508": "CONDICIONADOR BANHO DE VERNIZ EXTRATO DE FRUTAS VERMELHAS RIQUEZAS DA TERRA HAIR PRINCESS 1L",
  "5085": "MÁSCARA COLOR PROTECT HONEYMOON 300mL",
  "5086": "MÁSCARA DAY SYNERGY HONEYMOON 300mL",
  "5088": "SÉRUM RECONSTRUTOR KERASTINNI 5L",
  "509": "MASK BANHO DE VERNIZ EXTRATO DE FRUTAS VERMELHAS RIQUEZAS DA TERRA HAIR PRINCESS 1KG",
  "510": "SHAMPOO BANHO DE VERNIZ EXTRATO DE FRUTAS VERMELHAS RIQUEZAS DA TERRA HAIR PRINCESS 1L",
  "5141": "SÉRUM MULTIFUNCIONAL LUXO THAIS RODRIGUES 30mL",
  "5144": "BRAZILIAN PROTEIN ORGANIC CRYSTAL 1L",
  "5146": "HAIR TREATMENT RENOVA HAIR KERASTINNI HAIR COSMÉTIC 1Kg",
  "5151": "HAIR PROTEIN WHITE VIVI HAIR 1L",
  "5153": "RÍMEL E SÉRUM DE TRATAMENTO MAXLASHES RAINHA NATIVA 7mL",
  "5166": "CLARIFYING SHAMPOO DR. HAIR COLLAGEN COSMA SECRETS 1L",
  "517": "MÁSCARA MATIZADORA PLATINUM BELALINDA 500G",
  "5186": "CONDICIONADOR ALEGRIA DIVERTIDAMENTE CIA. BEAUTY 300mL",
  "519": "ALINHAMENTO CAPILAR ORIGINAL GHOODESS",
  "5197": "HAIR MASK DETOX BRASILEIRA 1Kg",
  "5198": "ALISANTE CAPILAR 6X1 NANO BLUE THERAPY LISS 1L",
  "5220": "HIDRATANTE MÃOS E CORPO STITCH CIA. BEAUTY 60mL",
  "5225": "BODY SPLASH ANGEL STITCH CIA. BEAUTY 200mL",
  "5227": "BODY SPLASH STITCH CIA. BEAUTY 200mL",
  "5231": "BRAZILIAN PROTEIN KP HAIR 1L",
  "5232": "NANO PLASTY KP HAIR 1L",
  "5234": "HAIR REALIGNMENT COMPLEX APPLE STEM CELL BLUE PROTEIN PLUS BRAZILIAN THERAPY   1L",
  "5235": "TREATMENT PROTEIN THERMAL SEALING BRAZILIAN THERAPY  1L",
  "5236": "PREPARING SHAMPOO THERMAL SEALING BRAZILIAN THERAPY 1L",
  "5237": "SMOOTHING MASK THERMAL SEALING BRAZILIAN THERAPY 1L",
  "5245": "MÁSCARA CAPILAR MATIZADORA BLOND SPECIALIST BROWN RÍGEL 250mL",
  "5246": "MÁSCARA CAPILAR MATIZADORA BLOND SPECIALIST VIOLET RÍGEL 250mL",
  "5247": "NUTRIC MASK SPECIAL REPAIR PRIAMON 200g",
  "5248": "RENEW MASK SPECIAL REPAIR PRIAMON 200g",
  "5249": "SUPER HYDRATION SPECIAL REPAIR PRIAMON 200g",
  "5258": "SPRAY ANTISSÉPTICO HIGIENIZANTE LINDERM 60mL",
  "5259": "MÁSCARA MATIZADORA POWER LOYAL FORMY",
  "5261": "ATIVADOR DE CACHOS SYRCSYM 500mL",
  "5263": "NATURAL SYSTEM BIOTIN BRUSH PROTEIN 300mL",
  "5269": "SHAMPOO TREATMENT STRONG MIRAD HAIR 250mL",
  "5271": "MÁSCARA TREATMENT STRONG MIRAD HAIR 500g",
  "5277": "INDIEN DK AESTHETICS 1L",
  "5279": "SABONETE LÍQUIDO ANDREZA GOULART 100mL",
  "5284": "NTOX CENOURA ROXA BLOND PLATINUM NATUREZA 1KG",
  "5285": "NTOX CENOURA NATUREZA 1KG",
  "5291": "NATURAL SYSTEM BIOTIN & PROTEIN NATUREZA 1L",
  "5292": "NATURAL SYSTEM SHAMPOO CLARIFICANTE NATUREZA  1L",
  "5294": "NATURAL SYSTEM SHAMPOO CLARIFICANTE NATUREZA 300mL",
  "53": "DUAL MOUSSE CABELOS CACHEADOS SELF CARE OLENKA 250G",
  "530": "SHAMPOO PREPARADOR UNIQUE FEEL 1L",
  "5351": "ORGANIC NANO SMOOTH ALAAPROTEIN VITAPLEX 1L",
  "5354": "MÁSCARA PISTACHE LOVE POTION GRANEL",
  "5355": "MÁSCARA BRAZILIAN GUARANÁ NATUREZA A GRANEL",
  "5356": "Frasco Blonde Toning Drops Miracle Icy Divine 30ml",
  "5357": "Frasco Shine Booster Miracle Glow Divine 60ml",
  "536": "PROGRESSIVA FORCE 2 ELLISO L. EL 1L",
  "5366": "PROTEIN SMOOTHING TREATMENT MAIS LISS MIRAL 1L",
  "54": "SHAMPOO CABELOS CACHEADOS SELF CARE OLENKA 280ML",
  "55": "DUAL MOUSSE MANUTENÇÃO DO LISO SELF CARE OLENKA 250G",
  "553": "TRATAMENTO UNIQUE FEEL 1L",
  "559": "CLEASING SHAMPOO TCHAU JUBA! VIZBELLE 1L",
  "56": "SHAMPOO MANUTENÇÃO DO LISO SELF CARE OLENKA 280ML",
  "560": "ALINHAMENTO TÉRMICO TCHAU JUBA! VIZBELLE 1L",
  "561": "ALINHAMENTO TÉRMICO MATIZANTE TCHAU JUBA! VIZBELLE 1L",
  "57": "DUAL MOUSSE PROTEÇÃO DE LOIROS SELF CARE OLENKA 250G",
  "578": "ORGANIC TREATMENT DR. HAIR COLLAGEN COSMA SECRETS 1L",
  "579": "PROTEIN SMOOTHING TREATMENT BEST-LISS MIRAL 1000mL",
  "58": "SHAMPOO PROTEÇÃO DE LOIROS SELF CARE OLENKA 280ML",
  "580": "PROTEIN SMOOTHING TREATMENT BLUE-LISS MIRAL 1000ML",
  "583": "ARGILA BRANCA PHYTOTERAPICA 200G",
  "59": "DUAL MOUSSE REGENERAÇÃO INTENSA SELF CARE OLENKA 250G",
  "6": "SPRAY DE REGENERAÇÃO BIO RECONSTRUTOR OLENKA 500ML",
  "60": "SHAMPOO REGENERAÇÃO INTENSA SELF CARE OLENKA 280ML",
  "608": "SHAMPOO CABELOS CACHEADOS ROZA RAIZ 500ML",
  "609": "CONDICIONADOR CABELOS CACHEADOS ROZA RAIZ 500ML",
  "610": "MÁSCARA CABELOS CACHEADOS ROZA RAIZ 300g",
  "612": "GELATINA CABELOS CACHEADOS ROZA RAIZ 300ML",
  "614": "SHAMPOO REALCE SEU LISO ROZA RAIZ 500ML",
  "615": "CONDICIONADOR REALCE SEU LISO ROZA RAIZ 500ML",
  "62": "ULTRA DEFENSE BLOND PLEX OLENKA 250ML",
  "620": "SHAMPOO BRILHO PRATA ROZA RAIZ 500ML",
  "621": "CONDICIONADOR BRILHO PRATA ROZA RAIZ 500ML",
  "623": "SHAMPOO CRONOGRAMA RECONSTRUÇÃO ROZA RAIZ 500ML",
  "624": "CONDICIONADOR CRONOGRAMA RECONSTRUÇÃO ROZA RAIZ 500ML",
  "625": "MÁSCARA CRONOGRAMA RECONSTRUÇÃO ROZA RAIZ 300ML",
  "628": "MÁSCARA CRONOGRAMA NUTRIÇÃO ROZA RAIZ 300ML",
  "629": "MÁSCARA CRONOGRAMA HIDRATAÇÃO ROZA RAIZ 300g",
  "63": "BLEND DE PROTEÍNAS OLENKA 600g",
  "640": "ESPUMA ANTISSÉPTICA HAPPIE 150ML",
  "691": "ARGILA AMARELA PHYTOTERAPICA 200G",
  "692": "ARGILA VERDE PHYTOTERAPICA 200G",
  "704": "ARGILA PRETA PHYTOTERAPICA 200G",
  "705": "ARGILA VERMELHA PHYTOTERAPICA 200G",
  "730": "ÓLEO REPARADOR BRUME RÍGEL 60ML",
  "744": "SHAMPOO HIDRATANTE MANDIOCA E BIOTINA LINDERM 2L",
  "756": "THERMAL SEALING PRO HAIRMONY 120ML",
  "85": "CONDICIONADOR FORTIFIER HAIR ANDINA PATAGONY COSMETICS 250ML",
  "853": "SHAMPOO REFRESCANTE 3X1 MEN ́S CARE LINDERM 500ML",
  "855": "SHAMPOO REFRESCANTE 3X1 MEN ́S CARE LINDERM 2L",
  "856": "CONDICIONADOR REVITALIZANTE 2X1 MEN ́S CARE LINDERM 500ML",
  "86": "LOÇÃO CAPILAR FORTIFIER HAIR ANDINA PATAGONY COSMETICS 120ML",
  "860": "CONDICIONADOR REVITALIZANTE 2X1 MEN ́S CARE LINDERM 2L",
  "861": "AROMATIZANTE PARA AMBIENTES AQUA BATH LINDERM 250ML",
  "862": "AROMATIZANTE PARA AMBIENTES BAMBOO LIVING LINDERM 250ML",
  "863": "AROMATIZANTE PARA AMBIENTES BLUE OFFICE LINDERM 250ML",
  "864": "AROMATIZANTE PARA AMBIENTES ROMANCE ROOM LINDERM 250ML",
  "87": "SHAMPOO FORTINIER HAIR ANDINA PATAGONY COSMETICS 250mL",
  "876": "PROTEIN SMOOTHING TREATMENT BEST-LISS MIRAL 150ML",
  "878": "ÁLCOOL GEL ANTISSÉPTICO PARA AS MÃOS LINDERM 500ML",
  "88": "MOUSSE DE LIMPEZA FACIAL DERMA CLEANSER THERMAL MOUSSE ANDINA PATAGONY COSMETICS 120ML",
  "899": "MÁSCARA HIDRATANTE CPR EVOLUTION TREATMENT PERSONALITIES 500g",
  "900": "SHAMPOO CPR EVOLUTION TREATMENT PERSONALITIES 500mL",
  "9000": "ESPUMA ÍNTIMA HAPPIE 150ML",
  "9021": "ATIVADOR DE CACHOS SYRCSYM 1L",
  "9025": "MÁSCARA MATIZADORA BLOND CARE RENOAH 250G",
  "9027": "SÉRUM FACIAL 12X1 GOLD EDITION AGUSTIN FERNANDEZ 30ML",
  "9031": "PROFESSIONAL SHAMPOO FRESH HAIR BELALINDA 5L",
  "9033": "CREME HIDRATANTE PARA AS MÃOS E CORPO NATUOZ ATLÂNTICA NATURAL 120G",
  "9036": "HAIR MASK HYDRATING THE TANINO TECHNIQUE HAIR BRASIL 500G",
  "9102": "SHAMPOO ANTIRRESÍDUOS ALINHAMENTO ABSOLUTO ATLÂNTICA NATURAL 1L",
  "9103": "REALINHAMENTO TÉRMICO ALINHAMENTO ABSOLUTO ATLÂNTICA NATURAL 1L",
  "9123": "CREME ULTRA HIDRATANTE OZONIZADO AQUASONUS 180ML",
  "9124": "GEL CALMANTE E RELAXANTE OZONIZADO AQUASONUS 180ML",
  "9126": "ATIVO AMORE MIO MARY VARGAS 1L",
  "9147": "PEELING SCRUB CREAM GEL AGUSTIN FERNANDEZ 50g",
  "9149": "ESPUMA ÍNTIMA FAMIVITA 100mL",
  "9150": "ACIDIFICANTE CAPILAR RESET VICTORIE ROYALE 500mL",
  "9156": "CREME HIDRATANTE FACIAL DERMA HIDRA ANDINA PATAGONY COSMETICS 50g",
  "9157": "BRUMA HIDRATANTE FACIAL DERMA HIDRA ANDINA PATAGONY COSMETICS 120mL",
  "9159": "PERFUME CAPILAR BLOOM ROSE RÍGEL 60mL",
  "9168": "SHAMPOO LIMPEZA SUAVE BRAZILIAN COLOR NATUREZA 1L",
  "9169": "SPRAY KERATINA BRAZILIAN COLOR NATUREZA 500mL",
  "9181": "SHAMPOO DEEP CLEASING MARSH MALLOW LOVE POTION 1L",
  "9182": "GLOSS EFEITO ESPELHO MARSH MALLOW LOVE POTION 1L",
  "9186": "SHAMPOO DETOX QUELANTE HAMMER PRIME 1L",
  "9193": "NANO RECONSTRUTOR BLINDAGEM 3D KERASTINNI HAIR COSMÉTIC 500mL",
  "9194": "FLUÍDO REESTRUTURANTE BLINDAGEM 3D KERASTINNI HAIR COSMÉTIC 500mL",
  "9200": "RECONSTRUTOR CAPILAR MULTIBENEFÍCIOS INTENSE KERATIN VICTORIE ROYALE 120mL",
  "9204": "PRIMER FACIAL ATL 30g",
  "9205": "CLEANSING OIL ATL 120mL",
  "9214": "HIDRATANTE EM GEL AGUSTIN FERNANDEZ 50g",
  "9221": "SHAMPOO DETOX QUELANTE LU CAPELLI 1L",
  "9225": "DR. HAIR PROTEIN COSMA SECRETS 1L",
  "9226": "SWEET ALMOND DR. HAIR VITAMIN PLUS COSMA SECRETS 1L",
  "9227": "SWEET ALMOND ORGANICBOTOX VITAMIN PLUS COSMA SECRETS 500g",
  "9237": "PÓ TRANSLÚCIDO NATURALBE ATL 50g",
  "9241": "BATOM LÍQUIDO NATURALBE ATL (BOCA) 8g",
  "9242": "BATOM LÍQUIDO NATURALBE ATL (ROSA) 8g",
  "9247": "LIP TINT LÍQUIDO NATURALBE ATL (VERMELHO) 8g",
  "9257": "FINALIZADOR ALÉM DO LISO KERASTINNI HAIR COSMÉTIC 200mL",
  "9258": "SHAMPOO ALÉM DO LISO KERASTINNI HAIR COSMÉTIC 450mL",
  "9259": "BÀLSAMO ALÉM DO LISO KERASTINNI HAIR COSMÉTIC 450mL",
  "9265": "SHAMPOO ANTIRRESÍDUOS EXPERT DEEP CLEAN RÍGEL 1L",
  "9266": "SELÁGEM TÉRMICA EXPERT NANOLISS RÍGEL 1L",
  "9267": "MÁSCARA PÓS QUÍMICA MEU CANVENSE 300mL",
  "9268": "SHAMPOO PÓS QUÍMICA MEU CANVENSE 300mL",
  "9297": "VINAGRE DE MAÇÃ CAPILAR PH CONTROL DIAMOND THAIS RODRIGUES 200mL",
  "9305": "CONDITIONER AMINO DAILY THERAPY KARIZMA COLLECTION 500mL",
  "9306": "SHAMPOO HIDRATANTE DAILY THERAPY KARIZMA COLLECTION 500mL",
  "9307": "NO FRIZZ HIDRATANTE HAIR RECONSTRUCTOR KARIZMA COLLECTION 250mL",
  "9308": "NO FRIZZ MÁSCARA RECONSTRUTORA 6X1 THERAPY LISS KARIZMA COLLECTION 1Kg",
  "9310": "MOUSSE DE LIMPEZA FACIAL DERMO CLEAN ATL 150mL",
  "9311": "SÉRUM FACIAL COLÁGENO ATL 18mL",
  "9312": "SÉRUM FACIAL NIACINAMIDA ATL 18mL",
  "9313": "SÉRUM FACIAL ÁCIDO HIALURÔNICO ATL 18mL",
  "9314": "SÉRUM FACIAL VITAMINA C ATL 18mL",
  "9315": "CREME CORPORAL MULTIFUNCIONAL FPS 30 Atl 180g",
  "9316": "CREME FACIAL MULTIFUNCIONAL FPS 60 Atl 60g",
  "9319": "GEL REDUTOR CORPORAL ATL 250g",
  "9336": "REALINHAMENTO CAPILAR THERAPY DIAMOND THAIS RODRIGUES 1L",
  "9337": "REALINHAMENTO TÉRMICO NANO LISS LOLA KERATIN EXPERT 1L",
  "9340": "BLOQUEADOR TÉRMICO CANVENSE 200mL",
  "9341": "REALINHAMENTO DOS FIOS NATULISO ATLÂNTICA NATURAL 200mL",
  "9348": "SHAMPOO PREPARATÓRIO CLEAN DETOX DIAMOND THAIS RODRIGUES 1L",
  "9350": "CLARIFYING SHAMPOO BRAZILIAN HAIR 500mL",
  "9352": "THERAPY CONDITIONER BRAZILIAN HAIR 500mL",
  "9354": "THERAPY SHAMPOO BRAZILIAN HAIR 500mL",
  "9355": "BATOM LÍQUIDO ATL 8g (FLÁVIA)",
  "9357": "BATOM LÍQUIDO ATL 8g (ANA LÍDIA)",
  "9358": "BATOM LÍQUIDO ATL 8g (MELRE)",
  "9359": "BATOM LÍQUIDO ATL 8g (RAFAELA)",
  "9360": "BATOM LÍQUIDO ATL 8g (CELIS)",
  "9361": "BATOM LÍQUIDO ATL 8g (RENATA)",
  "9367": "PERFUME VELVET SEA ANDREZA GOULART 100mL",
  "9385": "SHAMPOO QUELANTE AS PRIME CANVENSE 1L",
  "9386": "GLOSS ANTI-FRIZZ AS PRIME CANVENSE 1L",
  "9387": "GLOSS AS PRIME CANVENSE 1L",
  "9388": "FLUÍDO TERMOATIVO LISO SUPREMO THAIS RODRIGUES 200mL",
  "9389": "MÁSCARA MULTI-BENEFÍCIOS BANHO DE DIAMOND THAIS RODRIGUES 1Kg",
  "9393": "CREME DENTAL OZONIZADO DERMOPAC 90g",
  "9394": "CREME DE HIDRATAÇÃO E FORTIFICAÇÃO  MAGIC POWER KIZZYÊ 1KG",
  "9396": "MÁSCARA DE TRATAMENTO INSTANTÂNEO IMPACTO MIRACULOUS MALLÁWI 2KG",
  "9400": "MÁSCARA RECONSTRUTORA ULTRA-HIDRATANTE TEIA IMPACT POWER HELLCA 300mL",
  "9405": "OIL REPAIR LIGHT HONEYMOON 30mL",
  "9406": "SHAMPOO COLOR PROTECT HONEYMOON 300mL",
  "9407": "CONDICIONADOR COLOR PROTECT HONEYMOON 250mL",
  "9409": "SHAMPOO DAY SYNERGY HONEYMOON 300mL",
  "9410": "CONDICIONADOR DAY SYNERGY HONEYMOON 250mL",
  "9412": "BOOSTER HIDRATAÇÃO CRONOCAPILAR HONEYMOON 30mL",
  "9413": "BOOSTER NUTRIÇÃO CRONOCAPILAR HONEYMOON 30mL",
  "9414": "BOOSTER RECONSTRUÇÃO CRONOCAPILAR HONEYMOON 30mL",
  "9416": "POMADA APISBRASIL 20g",
  "9417": "ORGANIC ELIXIR OIL SYRCSYM 30mL",
  "9418": "CRÉME LISSANTE LUMINA SILK CELINE LISSAGE & HAIRSTYLE 1L",
  "9420": "SHAMPOO HOME-CARE BIO HAIR 500mL",
  "9427": "MÁSCARA INTENSIFICADORA PÓS-LIZZ KAIRÓS 500g",
  "9441": "REGENERADOR DE UNHAS VITA NAILS PODOKESIA 30mL",
  "9452": "CONDICIONADOR HIDRATANTE SPECIAL CARE LINE PRIAMON 200mL",
  "9454": "LEAVE-IN SPECIAL CARE LINE PRIAMON 150mL",
  "9455": "MÁSCARA HIDRATANTE SPECIAL CARE LINE PRIAMON 300g",
  "9456": "MASK UNIQUE LISS PRIAMON 1L",
  "9457": "NUTRIC MASK SPECIAL REPAIR PRIAMON 1Kg",
  "9460": "RENEW MASK SPECIAL REPAIR PRIAMON 1Kg",
  "9461": "SHAMPOO PREPARATÓRIO CLEAN START PRIAMON 1L",
  "9462": "SHAMPOO SPECIAL CARE LINE PRIAMON 300mL",
  "9463": "DELINEADOR PARA CABELOS BYE FRIZZ VAIOLLE 10g",
  "9484": "SHAMPOO LISO LOVE LINCYLOVE 300mL",
  "9485": "CONDICIONADOR LISO LOVE LINCYLOVE 300mL",
  "9486": "SHAMPOO HIDRATAÇÃO LOVE LINCYLOVE 300mL",
  "9487": "CONDICIONADOR HIDRATAÇÃO LOVE LINCYLOVE 300mL",
  "9488": "SHAMPOO NUTRIÇÃO LOVE LINCYLOVE 300mL",
  "9491": "ATIVO THERMOTERAPY REDUCTOR STRONG EZZOPLASTIA CAPILAR EZZOW 1L",
  "951": "SABONETE HIDRATANTE MELÃO E JASMIM LINDERM 500ML",
  "9515": "ANTIEMBORRACHAMENTO PRÉ E PÓS QUÍMICA SOS LOVE LINCYLOVE 175mL",
  "9528": "TERMOPROTETOR STOP FRIZZ VICTORIE ROYALE 250mL",
  "953": "SABONETE HIDRATANTE MELÃO E JASMIM LINDERM 2L",
  "9530": "ESCOVA DE UVA GRAPE POTION LOVE POTION 1L",
  "9538": "SHAMPOO PREMIUM ÉCLAT PURE SYRCSYM 250mL",
  "9539": "CONDICIONADOR PREMIUM ÉCLAT PURE SYRCSYM 250mL",
  "9549": "EAU DE PARFUM FORTUNE DEO BEAUTY 100mL",
  "9552": "BODY SPLASH FORTUNE DEO BEAUTY 200mL",
  "9560": "MÁSCARA MATIZADA BTX AS PRIME CANVENSE 1Kg",
  "9561": "MÁSCARA HIDRATANTE NO FRIZZ! LOVE POTION 500g",
  "9567": "FLUIDO CAPILAR MAGIC CREAM HELLCA 250mL",
  "9575": "SHAMPOO HIDRATANTE CRONOGRAMA CAPILAR AVANÇADO ATL 250mL",
  "9576": "CONDICIONADOR HIDRATANTE CRONOGRAMA CAPILAR AVANÇADO ATL 250mL",
  "9577": "MÁSCARA HIDRATANTE CRONOGRAMA CAPILAR AVANÇADO ATL 250g",
  "9578": "HIDRATANTE CORPORAL ENCANTADA ATL 250mL",
  "9579": "HIDRATANTE CORPORAL SENSUAL ATL 250mL",
  "9580": "HIDRATANTE CORPORAL RADIANTE ATL 250mL",
  "9593": "WHITE PROTEIN FLEX VEGAN PRODUCT FOX COSMETICS BRAZIL 1L",
  "9616": "MÁSCARA CAPILAR RECONSTRUÇÃO INSTANTÂNEA CRONOGRAMA CAPILAR CAPRI VICTORIE ROYALE 300mL",
  "9617": "MÁSCARA CAPILAR HIDRATAÇÃO INSTANTÂNEA CRONOGRAMA CAPILAR CAPRI VICTORIE ROYALE 300mL",
  "9618": "MÁSCARA CAPILAR NUTRIÇÃO INSTANTÂNEA CRONOGRAMA CAPILAR CAPRI VICTORIE ROYALE 300mL",
  "9619": "SÉRUM REPAIR CAPRI VICTORIE ROYALE 60mL",
  "9620": "FINALIZADOR NO FRIZZ! LOVE POTION 200mL",
  "963": "RARE PROTEIN APPLE STEM CELL PRO HAIRMONY 120ML",
  "9632": "RECONSTRUÇÃO SUPERDOSE IMPACT X CANVENSE 60ML",
  "9633": "HIDRATAÇÃO SUPERDOSE IMPACT X CANVENSE 60ML",
  "9636": "SHAMPOO NUTRITIVO NANO LISS LOLA KERATIN EXPERT 1L",
  "9637": "BLOQUEADOR TÉRMICO NANO LISS LOLA KERATIN EXPERT 250ML",
  "9638": "MÁSCARA SELADORA NANO LISS LOLA KERATIN EXPERT 1Kg",
  "9640": "AQUA THERMAL VIHANN 120mL",
  "9641": "MÁSCARA CAPILAR GOLDEN LINE VIHANN 300g",
  "9642": "CONDICIONADOR GOLDEN LINE VIHANN 300mL",
  "9643": "SHAMPOO GOLDEN LINE VIHANN 300mL",
  "9644": "AQUA MICELAR VIHANN 200mL",
  "9645": "CREME HIDRATANTE FACIAL AQUA REVITALIZE VIHANN 100g",
  "9646": "MOUSSE VIHANN 150mL",
  "9647": "SABONETE FACIAL AQUA REVITALIZANTE VIHANN 200mL",
  "9648": "ÓLEO DE REPARAÇÃO INTENSIVA HAIR OIL VIHANN 60mL",
  "9649": "CONDICIONADOR FORÇA E RESISTÊNCIA PARA TODOS OS TIPOS DE CABELO VIHANN 300mL",
  "9650": "SHAMPOO FORÇA E RESISTÊNCIA PARA TODOS OS TIPOS DE CABELO VIHANN 300mL",
  "9651": "CONDICONADOR FORÇA E RESISTÊNCIA PARA CABELOS SECOS VIHANN 300mL",
  "9652": "SHAMPOO FORÇA E RESISTÊNCIA PARA CABELOS SECOS VIHANN 300mL",
  "9653": "BATOM LÍQUIDO ATL 8g (NEIDE)",
  "9654": "SHAMPOO FORÇA E RESISTÊNCIA PARA CABELOS OLEOSOS VIHANN 300mL",
  "9655": "CONDICIONADOR FORÇA E RESISTÊNCIA PARA CABELOS OLEOSOS VIHANN 300mL",
  "9681": "REPAIR MASK IMPACT X CANVENSE 1KG",
  "9682": "LA PARFUM SECRETS D.PRO HAIR CARE 60ML",
  "9684": "HAIR PARFUM SEDUCTION ROUGE VIHANN 60mL",
  "9685": "SÉRUM FACIAL NIACINAMIDA VIHANN 16mL",
  "9686": "SÉRUM FACIAL COLÁGENO VIHANN 16mL",
  "9687": "SÉRUM FACIAL ÁCIDO HIALURÔNICO VIHANN 16mL",
  "9688": "SÉRUM FACIAL VITAMINA C VIHANN 16mL",
  "9689": "PEELING DE CRISTAL AQUA REVITALIZE VIHANN 60g",
  "9691": "MÁSCARA DE REVITALIZAÇÃO LOIRO PLATINADO OLENKOLOR OLENKA 250mL",
  "9692": "MÁSCARA DE REVITALIZAÇÃO LOIRO INTENSO OLENKOLOR OLENKA 250mL",
  "9694": "MÁSCARA DE REVITALIZAÇÃO MORENAS ILUMINADAS CARAMELO OLENKOLOR OLENKA 250mL",
  "9695": "MÁSCARA DE REVITALIZAÇÃO LOIRO PRATEADO OLENKOLOR OLENKA 250mL",
  "9696": "MÁSCARA DE RECONSTRUÇÃO E RECUPERAÇÃO BIO RECONSTRUTOR OLENKA 250mL",
  "9697": "PROTETOR TÉRMICO CONTROLE DE FRIZZ LIZZER NM NATH MINATTO 8mL",
  "9712": "MÁSCARA DE TRATAMENTO HIDRATAÇÃO LOVE LINCYLOVE 300G",
  "9713": "MÁSCARA DE TRATAMENTO LISO LOVE LINCYLOVE 300G",
  "9714": "MÁSCARA DE TRATAMENTO NUTRIÇÃO LOVE LINCYLOVE 300G",
  "9734": "HAIR THERAPY PLATINUM MASK BRAZILIAN BLUE MONA 1L",
  "9735": "HAIR THERAPY SHAMPOO BRAZILIAN BLUE MONA 1L",
  "9736": "PROTEIN BLEND MASK CURL+ MONA 500g",
  "9737": "RECONSTRUCTOR CC CREAM CURL+ MONA 1L",
  "9738": "STANDARD MOISTURIZER SHEA BUTTER CONDITIONER CURL+ MONA 1L",
  "9739": "STANDARD MOISTURIZER SHEA BUTTER SHAMPOO CURL+ MONA 1L",
  "9740": "AMPOLA NUTRIÇÃO CRONO POWER ATL10mL",
  "9741": "AMPOLA RECONSTRUÇÃO CRONO POWER ATL 10mL",
  "9742": "ATIVADOR DE CACHOS ATL 250mL",
  "9743": "CONDICIONADOR INFANTIL ATL 250mL",
  "9744": "CREME DENTAL ATL 90g",
  "9745": "MÁSCARA GOLDHYDRATION ATL 250g",
  "9746": "DESODORANTE EM CREME ATL 60g",
  "9747": "ÓLEO FINALIZADOR ATL 60mL",
  "9748": "PROTETOR TÉRMICO ATL 200mL",
  "9749": "CONDICIONADOR GOLDHYDRATION ATL 250mL",
  "975": "ULTRA CONTROL MASK FSH FIRST SILKY HAIR PLUS 1L",
  "9750": "SABONETE DE BANHO ATL 400mL",
  "9751": "SHAMPOO GOLDHYDRATION ATLÂNTICA NATURAL 250mL",
  "9752": "SHAMPOO INFANTIL ATL 250mL",
  "9753": "BB CREAM LOVE LEAVE-IN LINCYLOVE 300mL",
  "9756": "RECONSTRUTOR DE POROSIDADE SUPREME CPR PRIAMON 1L",
  "9757": "REPARADOR DE CUTÍCULA SUPREME CPR PRIAMON 1L",
  "9759": "ÁGUA MICELAR CORPORAL LEVITATE 200mL",
  "976": "ULTRA CONTROL MASK VIOLET FSH FIRST SILKY HAIR PLUS 1L",
  "9760": "MÁSCARA MATIZADORA POWER LOYAL FORMY 300g",
  "9765": "CREME EFEITO LIFTING TU & EU 30g",
  "977": "ORGANIC PROTEIN ARGAN FILLER 1L",
  "9773": "BATOM LÍQUIDO VELVET COMFORT ANDREZA GOULART (VERMELHO PAIXÃO) 7mL",
  "9774": "BATOM LÍQUIDO VELVET COMFORT ANDREZA GOULART (ROSÊ ROMÂNTICO) 7mL",
  "9775": "BATOM LÍQUIDO VELVET COMFORT ANDREZA GOULART (DUNA CLÁSSICA) 7mL",
  "9776": "BATOM LÍQUIDO VELVET COMFORT ANDREZA GOULART (CHOCOLATE LUXO) 7mL",
  "9777": "BATOM LÍQUIDO VELVET COMFORT ANDREZA GOULART (ORQUÍDEA REAL) 7mL",
  "9778": "BODY SPLASH BC GOLD BC BRUNA CARDOSO 200mL",
  "9779": "HAIR THERAPY SHAMPOO BRAZILIAN BLUE MONA 250mL",
  "978": "ORGANIC PROTEIN DIAMOND CAVIAR 1L",
  "9780": "HAIR THERAPY CONDITIONER BRAZILIAN BLUE MONA 250mL",
  "9785": "SHAMPOO DAILY USE PRIER 300mL",
  "9786": "MÁSCARA DAILY USE PRIER 300g",
  "9787": "RECONSTRUTOR DAILY USE PRIER 200g",
  "9788": "LEAVE-IN DAILY USE PRIER 250mL",
  "9789": "FLUÍDO DAILY USE PRIER 250mL",
  "9790": "EAU DE PARFUM CIGNO 50mL",
  "9793": "EAU DE PARFUM E SE DEO BEAUTY 100mL",
  "9794": "PERFUME DIVERSY OLLOR 100mL",
  "9798": "HAIR PLASTIC SURGERY BTX DIVINE FIOS DIVINE 1L",
  "980": "ORGANIC PROTEIN AYLA 4G 1L",
  "9804": "CREME HIDRATANTE MAXY PELE 110mL",
  "9805": "SPRAY AROMATIZANTE DE AMBIENTES E TECIDOS PEÔNIA ROMANCE CASA 120mL",
  "9806": "SPRAY AROMATIZANTE DE AMBIENTES E TECIDOS VANILLA GOLD ROMANCE CASA 120mL",
  "9812": "CUSTOME BLONDE TONING DROPS MIRACLE ICY DIVINE 30mL",
  "9813": "MÁSCARA LÍQUIDO PISTACHE LIZ BEAUTY CO. 120ML",
  "9814": "BODY SPLASH ELIXIR ANDREZA GOULART 120mL",
  "9815": "BODY SPLASH LUMIÉRE ANDREZA GOULART 120mL",
  "982": "ANTIEMBORRACHANTE BELLPLEX TOTALPLEX CHARBELL 300ML",
  "9821": "SÉRUM MULTIFUNCIONAL LUXO THAIS RODRIGUES 60mL",
  "9822": "CREME HIDRATANTE PARA OS PÉS PODOKESIA 100g",
  "9823": "CONDICIONADOR PKXD CIA. BEAUTY 220mL",
  "9824": "SHAMPOO PKXD CIA. BEAUTY 220mL",
  "9825": "HIDRATANTE PKXD CIA. BEAUTY 220mL",
  "9826": "SABONETE LÍQUIDO PKXD CIA. BEAUTY 220mL",
  "9827": "HIDRATANTE CORPORAL SNOOPY CIA. BEAUTY 250mL",
  "9829": "RÍMEL E SÉRUM DE TRATAMENTO MAXLASHES RAINHA NATIVA 10mL",
  "9830": "ÓLEO CORPORAL E SE DEO BEAUTY 120mL",
  "9832": "SHAMPOO CONTROLE OLEOSIDADE EQUILÍBRIO LOVE LINCYLOVE 300mL",
  "9833": "TÔNICO CAPILAR POWER THAÍS RODRIGUES 100mL",
  "9834": "SPRAY AROMATIZANTE DE AMBIENTES E TECIDOS MAÇÂ E CANELA ROMANCE CASA 120mL",
  "9835": "SPRAY AROMATIZANTE DE AMBIENTES E TECIDOS CEREJA E AVELÃ ROMANCE CASA 120mL",
  "9836": "MODELADOR DE CACHOS CARYO CACHOS CARYOCAR 500mL",
  "9839": "CONDICIONADOR ALEGRIA DIVERTIDAMENTE CIA. BEAUTY 200mL",
  "9840": "SHAMPOO ANSIEDADE DIVERTIDAMENTE CIA. BEAUTY 300mL",
  "9841": "SABONETE LÍQUIDO NOJINHO E INVEJA DIVERTIDAMENTE CIA. BEAUTY 250mL",
  "9842": "SABONETE LÍQUIDO MEDO E ANSIEDADE DIVERTIDAMENTE CIA. BEAUTY 250mL",
  "9843": "HIDRATANTE CORPORAL TODOS DIVERTIDAMENTE CIA. BEAUTY 250mL",
  "9845": "SHAMPOO TREATMENT SALON TREATMENT D.PRO HAIR CARE 5L",
  "9846": "CONDICIONADOR TREATMENT SALON TREATMENT D.PRO HAIR CARE 5L",
  "9847": "ATIVADOR DE CACHOS CACHOS LOVE LINCYLOVE 300mL",
  "9848": "CONDICIONADOR CACHOS LOVE LINCYLOVE 300mL",
  "9849": "MÁSCARA HIDRATANTE CACHOS LOVE LINCYLOVE 300g",
  "9850": "SHAMPOO CACHOS LOVE LINCYLOVE 300mL",
  "9851": "LEAVE-IN RECONSTRUTOR TOTAL REPAIR. CLAU VOGT 200mL",
  "9852": "MÁSCARA CAPILAR RECONSTRUTORA TOTAL REPAIR. CLAU VOGT 500g",
  "9853": "SHAMPOO RECONSTRUTOR TOTAL REPAIR. CLAU VOGT 500mL",
  "9854": "ALISANTE CAPILAR 6X1 GRAY CAVIAR THERAPY LISS 1L",
  "9855": "PERFUME CAPILAR. CLAU VOGT 50mL",
  "9856": "BODY SPLASH. CLAU VOGT 200mL",
  "9857": "SÉRUM REPARADOR TOTAL REPAIR. CLAU VOGT 30mL",
  "9858": "SHAMPOO MATIZADOR MATIZADOR LOVE LINCYLOVE 300mL",
  "9859": "MÁSCARA MATIZADORA MATIZADOR LOVE LINCYLOVE 300g",
  "9860": "SHAMPOO BLOND BIO HAIR 500mL",
  "9861": "CONDITIONER BLOND BIO HAIR 500mL",
  "9862": "HAIR MASK BLOND BIO HAIR 500g",
  "9863": "HAIR CHEMICAL BLOND BIO HAIR 500g",
  "9864": "SABONETE LÍQUIDO TRISTEZA E VERGONHA DIVERTIDAMENTE CIA. BEAUTY 250mL",
  "9871": "SÉRUM BRAZILIAN BLEND BIO HAIR 120mL",
  "9878": "BODY SPLASH MARKEZA MAJESTY LIZZANTE 200mL",
  "9879": "PERFUME CAPILAR MARKEZA MAJESTY LIZZANTE 60mL",
  "988": "POMADA CAPILAR EFEITO MOLHADO LINDERM 130G",
  "9880": "BODY SPLASH MARKEZA SUNSHINE LIZZANTE 200mL",
  "9881": "PERFUME CAPILAR MARKEZA SUNSHINE LIZZANTE 60mL",
  "9882": "BODY SPLASH MARKEZA PURPLE ROYAL LIZZANTE 200mL",
  "9883": "PERFUME CAPILAR MARKEZA PURPLE ROYAL LIZZANTE 60mL",
  "9884": "BODY SPLASH MARKEZA CHERRY LIZZANTE 200mL",
  "9885": "PERFUME CAPILAR MARKEZA CHERRY LIZZANTE 60mL",
  "9886": "PASTA MODELADORA SPIDER OVERLORD 90G",
  "9887": "MODELADOR TEEN SUPERHERO OVERLORD 90g",
  "9888": "BODY SPLASH YAY ALEGRIA DIVERTIDAMENTE CIA. BEAUTY 200mL",
  "9889": "BODY SPLASH I ́M FINE ANSIEDADE DIVERTIDAMENTE CIA. BEAUTY 200mL",
  "989": "PROGRESS MASK HELLCA 1L",
  "9890": "BODY SPLASH YEAAAH, NO TÉDIO DIVERTIDAMENTE CIA. BEAUTY 200mL",
  "9891": "BODY SPLASH BURSTS OF EMOTION! TODOS DIVERTIDAMENTE CIA. BEAUTY 200mL",
  "9896": "BODY SPLASH ANGEL STITCH CIA. BEAUTY 25mL",
  "9897": "BODY SPLASH STITCH CIA. BEAUTY 25mL",
  "9899": "MÁSCARA DE TRATAMENTO BTX EXPERT NANOLISS RÍGEL 1Kg",
  "9908": "SHAMPOO STITCH CIA. BEAUTY 280mL",
  "9909": "CONDICIONADOR STITCH CIA. BEAUTY  280mL",
  "9916": "SHAMPOO TREATMENT STRONG MIRAD HAIR 1L",
  "9917": "MÁSCARA TREATMENT STRONG MIRAD HAIR 1Kg",
  "9921": "SHAMPOO OFF QUELANTE PURIFICANTE KERASTINNI 500mL",
  "9922": "ORGANIC NANO SMOOTH WHITE ALAAPROTEIN VITAPLEX 1L",
  "9955": "FILLER CIBAC GRANEL",
}

// Icon mapping - separate from state
const stageIcons = {
  "ordens-producao": Package,
  "lotes-batidas": Layers,
  manipulacao: Package,
  "controle-qualidade": AlertCircle,
  "envase-embalagem": Package,
  finalizado: CheckCircle,
}

// Default stages structure
const getDefaultStages = () => ({
  "ordens-producao": {
    id: "ordens-producao",
    title: "Ordens de Produção",
    color: "bg-blue-50",
    orders: [],
  },
  "lotes-batidas": {
    id: "lotes-batidas",
    title: "Lotes/Batidas",
    color: "bg-orange-50",
    orders: [],
  },
  manipulacao: {
    id: "manipulacao",
    title: "Manipulação",
    color: "bg-gray-100",
    orders: [],
  },
  "controle-qualidade": {
    id: "controle-qualidade",
    title: "Controle de Qualidade",
    color: "bg-yellow-100",
    orders: [],
  },
  "envase-embalagem": {
    id: "envase-embalagem",
    title: "Envase/Embalagem",
    color: "bg-blue-100",
    orders: [],
  },
  finalizado: {
    id: "finalizado",
    title: "Finalizado",
    color: "bg-green-100",
    orders: [],
  },
})

const KanbanProductionSystem = () => {
  const [stages, setStages] = useState(getDefaultStages())
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [selectedOrder, setSelectedOrder] = useState(null)
  const [orderToDelete, setOrderToDelete] = useState(null)
  const [newOrder, setNewOrder] = useState({
    sku: "",
    description: "",
    quantity: "",
    priority: "medium",
    inicioProducao: "",
    terminoProducao: "",
    observacoes: "",
    batchMultiple: false,
    totalBatches: undefined,
    batchWeights: undefined,
  })

  const [operatorDialog, setOperatorDialog] = useState({
    open: false,
    order: null,
    sourceStage: null,
    destStage: null,
    destIndex: null,
  })
  const [observationsDialog, setObservationsDialog] = useState({
    open: false,
    order: null,
    stageId: null,
  })
  const [observations, setObservations] = useState("")
  const [operatorName, setOperatorName] = useState("")

  const [editDialog, setEditDialog] = useState({
    open: false,
    order: null,
    stageId: null,
  })
  const [editOrder, setEditOrder] = useState({
    sku: "",
    description: "",
    quantity: "",
    priority: "medium",
    inicioProducao: "",
    terminoProducao: "",
    observacoes: "",
    batchMultiple: false,
    totalBatches: undefined,
    batchWeights: undefined,
  })

  const [batchDialog, setBatchDialog] = useState({
    open: false,
    order: null,
    stageId: null,
  })
  const [batchQuantityDialog, setBatchQuantityDialog] = useState({
    open: false,
    order: null,
    stageId: null,
    totalBatches: 0,
  })
  const [batchQuantity, setBatchQuantity] = useState("")
  const [batchWeights, setBatchWeights] = useState([])

  // Load data from localStorage on component mount
  useEffect(() => {
    const savedStages = localStorage.getItem("kanban-stages")
    if (savedStages) {
      try {
        const parsedStages = JSON.parse(savedStages)

        // Ensure all required stages exist (migration for existing data)
        const defaultStages = getDefaultStages()
        const migratedStages = { ...defaultStages }

        // Copy existing stages and their orders
        Object.keys(parsedStages).forEach((stageKey) => {
          if (migratedStages[stageKey]) {
            migratedStages[stageKey].orders = parsedStages[stageKey].orders || []
          }
          // Migration: consolidate envase and embalagem into envase-embalagem
          else if (stageKey === "envase" || stageKey === "embalagem") {
            if (!migratedStages["envase-embalagem"]) {
              migratedStages["envase-embalagem"] = {
                id: "envase-embalagem",
                title: "Envase/Embalagem",
                color: "bg-blue-100",
                orders: [],
              }
            }
            migratedStages["envase-embalagem"].orders = [
              ...migratedStages["envase-embalagem"].orders,
              ...(parsedStages[stageKey].orders || []),
            ]
          }
        })

        // Convert date strings back to Date objects
        Object.keys(migratedStages).forEach((stageKey) => {
          migratedStages[stageKey].orders = migratedStages[stageKey].orders.map((order) => ({
            ...order,
            createdAt: new Date(order.createdAt),
            inicioProducao: order.inicioProducao ? new Date(order.inicioProducao) : undefined,
            terminoProducao: order.terminoProducao ? new Date(order.terminoProducao) : undefined,
            // Ensure all orders have the new fields
            operatorName: order.operatorName || "",
            observacoes: order.observacoes || "",
            batchMultiple: order.batchMultiple || false,
            totalBatches: order.totalBatches,
            batchWeights: order.batchWeights,
            parentOrderId: order.parentOrderId,
            batchNumber: order.batchNumber,
            isBatch: order.isBatch || false,
          }))
        })

        setStages(migratedStages)
      } catch (error) {
        console.error("Error loading saved data:", error)
        // If there's an error, use default stages
        setStages(getDefaultStages())
      }
    }
  }, [])

  // Save data to localStorage whenever stages change
  useEffect(() => {
    localStorage.setItem("kanban-stages", JSON.stringify(stages))
  }, [stages])

  const handleSkuChange = (value) => {
    setNewOrder({ ...newOrder, sku: value })

    // Auto-fill description if SKU exists in database
    if (productDatabase[value]) {
      setNewOrder((prev) => ({
        ...prev,
        sku: value,
        description: productDatabase[value],
      }))
    } else if (value === "") {
      // Clear description if SKU is cleared
      setNewOrder((prev) => ({
        ...prev,
        sku: "",
        description: "",
      }))
    }
  }

  const handleDragEnd = (result) => {
    const { destination, source, draggableId } = result

    if (!destination) return

    if (destination.droppableId === source.droppableId && destination.index === source.index) {
      return
    }

    // Check if moving from "lotes-batidas" to "manipulacao" OR from "ordens-producao" to "manipulacao"
    if (
      (source.droppableId === "lotes-batidas" && destination.droppableId === "manipulacao") ||
      (source.droppableId === "ordens-producao" && destination.droppableId === "manipulacao")
    ) {
      const sourceStage = stages[source.droppableId]
      const draggedOrder = sourceStage.orders[source.index]

      setOperatorDialog({
        open: true,
        order: draggedOrder,
        sourceStage: source,
        destStage: destination,
        destIndex: destination.index,
      })
      return
    }

    // Normal drag and drop logic
    const sourceStage = stages[source.droppableId]
    const destStage = stages[destination.droppableId]
    const draggedOrder = sourceStage.orders[source.index]

    const newSourceOrders = Array.from(sourceStage.orders)
    newSourceOrders.splice(source.index, 1)

    const newDestOrders = Array.from(destStage.orders)
    newDestOrders.splice(destination.index, 0, draggedOrder)

    setStages({
      ...stages,
      [source.droppableId]: {
        ...sourceStage,
        orders: newSourceOrders,
      },
      [destination.droppableId]: {
        ...destStage,
        orders: newDestOrders,
      },
    })
  }

  const addNewOrder = () => {
    if (!newOrder.sku || !newOrder.description || !newOrder.quantity) return

    const order = {
      id: `order-${Date.now()}`,
      sku: newOrder.sku,
      description: newOrder.description,
      quantity: Number.parseInt(newOrder.quantity),
      stage: "ordens-producao",
      createdAt: new Date(),
      priority: newOrder.priority,
      inicioProducao: newOrder.inicioProducao ? new Date(newOrder.inicioProducao) : undefined,
      terminoProducao: newOrder.terminoProducao ? new Date(newOrder.terminoProducao) : undefined,
      operatorName: "",
      observacoes: newOrder.observacoes,
      batchMultiple: newOrder.batchMultiple,
      totalBatches: newOrder.totalBatches,
      batchWeights: newOrder.batchWeights,
      isBatch: false,
    }

    // Ensure the stage exists before trying to access it
    const ordensProducaoStage = stages["ordens-producao"]
    if (!ordensProducaoStage) {
      console.error("ordens-producao stage not found")
      return
    }

    setStages({
      ...stages,
      "ordens-producao": {
        ...ordensProducaoStage,
        orders: [...ordensProducaoStage.orders, order],
      },
    })

    setNewOrder({
      sku: "",
      description: "",
      quantity: "",
      priority: "medium",
      inicioProducao: "",
      terminoProducao: "",
      observacoes: "",
      batchMultiple: false,
      totalBatches: undefined,
      batchWeights: undefined,
    })
    setIsDialogOpen(false)
  }

  const getPriorityColor = (priority) => {
    switch (priority) {
      case "high":
        return "bg-red-500"
      case "medium":
        return "bg-yellow-500"
      case "low":
        return "bg-green-500"
      default:
        return "bg-gray-500"
    }
  }

  const getProductionDateStatus = (terminoProducao) => {
    if (!terminoProducao) return null

    const today = new Date()
    const endDate = new Date(terminoProducao)

    // Reset time to compare only dates
    today.setHours(0, 0, 0, 0)
    endDate.setHours(0, 0, 0, 0)

    if (endDate < today) {
      return { color: "text-red-600 bg-red-50", status: "overdue" }
    } else if (endDate.getTime() === today.getTime()) {
      return { color: "text-yellow-700 bg-yellow-50", status: "today" }
    }

    return { color: "text-gray-500", status: "future" }
  }

  const printLabel = (order) => {
    setSelectedOrder(order)
  }

  const confirmDelete = (orderId, stageId) => {
    setOrderToDelete({ orderId, stageId })
  }

  const deleteOrder = () => {
    if (!orderToDelete) return

    const { orderId, stageId } = orderToDelete
    const stage = stages[stageId]
    const updatedOrders = stage.orders.filter((order) => order.id !== orderId)

    setStages({
      ...stages,
      [stageId]: {
        ...stage,
        orders: updatedOrders,
      },
    })

    setOrderToDelete(null)
  }

  const cancelDelete = () => {
    setOrderToDelete(null)
  }

  const confirmOperator = () => {
    if (!operatorName.trim()) return

    const { order, sourceStage, destStage, destIndex } = operatorDialog

    // Update order with operator name
    const updatedOrder = { ...order, operatorName: operatorName.trim() }

    // If this is a batch card being moved from lotes-batidas to manipulacao,
    // reduce the quantity from the parent order
    if (order.isBatch && order.parentOrderId && sourceStage.droppableId === "lotes-batidas") {
      // Find the parent order and reduce its quantity
      const allStages = { ...stages }
      Object.keys(allStages).forEach((stageKey) => {
        allStages[stageKey].orders = allStages[stageKey].orders.map((o) => {
          if (o.id === order.parentOrderId) {
            return {
              ...o,
              quantity: Math.max(0, o.quantity - order.quantity),
            }
          }
          return o
        })
      })

      // Remove from source
      const newSourceOrders = Array.from(allStages[sourceStage.droppableId].orders)
      newSourceOrders.splice(sourceStage.index, 1)

      // Add to destination
      const newDestOrders = Array.from(allStages[destStage.droppableId].orders)
      newDestOrders.splice(destStage.destIndex, 0, updatedOrder)

      setStages({
        ...allStages,
        [sourceStage.droppableId]: {
          ...allStages[sourceStage.droppableId],
          orders: newSourceOrders,
        },
        [destStage.droppableId]: {
          ...allStages[destStage.droppableId],
          orders: newDestOrders,
        },
      })
    } else {
      // Normal move without quantity reduction
      // Remove from source
      const newSourceOrders = Array.from(stages[sourceStage.droppableId].orders)
      newSourceOrders.splice(sourceStage.index, 1)

      // Add to destination
      const newDestOrders = Array.from(stages[destStage.droppableId].orders)
      newDestOrders.splice(destStage.destIndex, 0, updatedOrder)

      setStages({
        ...stages,
        [sourceStage.droppableId]: {
          ...stages[sourceStage.droppableId],
          orders: newSourceOrders,
        },
        [destStage.droppableId]: {
          ...stages[destStage.droppableId],
          orders: newDestOrders,
        },
      })
    }

    setOperatorDialog({ open: false, order: null, sourceStage: null, destStage: null, destIndex: null })
    setOperatorName("")
  }

  const cancelOperator = () => {
    setOperatorDialog({ open: false, order: null, sourceStage: null, destStage: null, destIndex: null })
    setOperatorName("")
  }

  const openObservations = (order, stageId) => {
    setObservationsDialog({ open: true, order, stageId })
    setObservations(order.observacoes || "")
  }

  const saveObservations = () => {
    const { order, stageId } = observationsDialog

    // Update the order with new observations
    const updatedOrders = stages[stageId].orders.map((o) =>
      o.id === order.id ? { ...o, observacoes: observations } : o,
    )

    setStages({
      ...stages,
      [stageId]: {
        ...stages[stageId],
        orders: updatedOrders,
      },
    })

    setObservationsDialog({ open: false, order: null, stageId: null })
    setObservations("")
  }

  const cancelObservations = () => {
    setObservationsDialog({ open: false, order: null, stageId: null })
    setObservations("")
  }

  const handleCardDoubleClick = (order, stageId) => {
    setEditDialog({ open: true, order, stageId })
    setEditOrder({
      sku: order.sku,
      description: order.description,
      quantity: order.quantity.toString(),
      priority: order.priority,
      inicioProducao: order.inicioProducao ? order.inicioProducao.toISOString().slice(0, 16) : "",
      terminoProducao: order.terminoProducao ? order.terminoProducao.toISOString().slice(0, 16) : "",
      observacoes: order.observacoes || "",
      batchMultiple: order.batchMultiple || false,
      totalBatches: order.totalBatches,
      batchWeights: order.batchWeights,
    })
  }

  const saveEditOrder = () => {
    if (!editOrder.sku || !editOrder.description || !editOrder.quantity) return

    const { order, stageId } = editDialog

    const updatedOrder = {
      ...order,
      sku: editOrder.sku,
      description: editOrder.description,
      quantity: Number.parseInt(editOrder.quantity),
      priority: editOrder.priority,
      inicioProducao: editOrder.inicioProducao ? new Date(editOrder.inicioProducao) : undefined,
      terminoProducao: editOrder.terminoProducao ? new Date(editOrder.terminoProducao) : undefined,
      observacoes: editOrder.observacoes,
      batchMultiple: editOrder.batchMultiple,
      totalBatches: editOrder.totalBatches,
      batchWeights: editOrder.batchWeights,
    }

    // Update the order in the stage
    const updatedOrders = stages[stageId].orders.map((o) => (o.id === order.id ? updatedOrder : o))

    setStages({
      ...stages,
      [stageId]: {
        ...stages[stageId],
        orders: updatedOrders,
      },
    })

    setEditDialog({ open: false, order: null, stageId: null })
    setEditOrder({
      sku: "",
      description: "",
      quantity: "",
      priority: "medium",
      inicioProducao: "",
      terminoProducao: "",
      observacoes: "",
      batchMultiple: false,
      totalBatches: undefined,
      batchWeights: undefined,
    })
  }

  const cancelEditOrder = () => {
    setEditDialog({ open: false, order: null, stageId: null })
    setEditOrder({
      sku: "",
      description: "",
      quantity: "",
      priority: "medium",
      inicioProducao: "",
      terminoProducao: "",
      observacoes: "",
      batchMultiple: false,
      totalBatches: undefined,
      batchWeights: undefined,
    })
  }

  const handleEditSkuChange = (value) => {
    setEditOrder({ ...editOrder, sku: value })

    // Auto-fill description if SKU exists in database
    if (productDatabase[value]) {
      setEditOrder((prev) => ({
        ...prev,
        sku: value,
        description: productDatabase[value],
      }))
    } else if (value === "") {
      // Clear description if SKU is cleared
      setEditOrder((prev) => ({
        ...prev,
        sku: "",
        description: "",
      }))
    }
  }

  const handleBatchMultipleChange = (order, stageId, checked) => {
    if (checked) {
      setBatchDialog({ open: true, order, stageId })
    } else {
      // Remove batch information from order
      const updatedOrders = stages[stageId].orders.map((o) =>
        o.id === order.id ? { ...o, batchMultiple: false, totalBatches: undefined, batchWeights: undefined } : o,
      )

      setStages({
        ...stages,
        [stageId]: {
          ...stages[stageId],
          orders: updatedOrders,
        },
      })
    }
  }

  const confirmBatchQuantity = () => {
    if (!batchQuantity || Number.parseInt(batchQuantity) <= 0) return

    const totalBatches = Number.parseInt(batchQuantity)
    setBatchQuantityDialog({
      open: true,
      order: batchDialog.order,
      stageId: batchDialog.stageId,
      totalBatches,
    })
    setBatchWeights(new Array(totalBatches).fill(""))
    setBatchDialog({ open: false, order: null, stageId: null })
    setBatchQuantity("")
  }

  const cancelBatchQuantity = () => {
    setBatchDialog({ open: false, order: null, stageId: null })
    setBatchQuantity("")
  }

  const saveBatchWeights = () => {
    const { order, stageId } = batchQuantityDialog

    // Validate all weights are filled
    if (batchWeights.some((weight) => !weight || Number.parseFloat(weight) <= 0)) {
      alert("Por favor, preencha todos os pesos das batidas com valores válidos.")
      return
    }

    // Calculate total batch weight
    const totalBatchWeight = batchWeights.reduce((sum, weight) => sum + Number.parseFloat(weight), 0)

    // Validate total batch weight doesn't exceed original quantity
    if (totalBatchWeight > order.quantity) {
      alert("Qtde maior que a demanda")
      return
    }

    // Update the original order with batch information
    const updatedOrders = stages[stageId].orders.map((o) =>
      o.id === order.id
        ? {
            ...o,
            batchMultiple: true,
            totalBatches: batchQuantityDialog.totalBatches,
            batchWeights: batchWeights.map((weight) => Number.parseFloat(weight)),
          }
        : o,
    )

    // Create individual batch cards and add them to "lotes-batidas" stage
    const batchCards = batchWeights.map((weight, index) => ({
      id: `batch-${order.id}-${index + 1}-${Date.now()}`,
      sku: order.sku,
      description: order.description,
      quantity: Number.parseFloat(weight),
      stage: "lotes-batidas",
      createdAt: new Date(),
      priority: order.priority,
      inicioProducao: order.inicioProducao,
      terminoProducao: order.terminoProducao,
      operatorName: "",
      observacoes: order.observacoes,
      batchMultiple: false,
      parentOrderId: order.id,
      batchNumber: index + 1,
      isBatch: true,
    }))

    // Add batch cards to lotes-batidas stage
    const lotesBatidasStage = stages["lotes-batidas"]
    const updatedStages = {
      ...stages,
      [stageId]: {
        ...stages[stageId],
        orders: updatedOrders,
      },
      "lotes-batidas": {
        ...lotesBatidasStage,
        orders: [...lotesBatidasStage.orders, ...batchCards],
      },
    }

    setStages(updatedStages)

    setBatchQuantityDialog({ open: false, order: null, stageId: null, totalBatches: 0 })
    setBatchWeights([])
  }

  const cancelBatchWeights = () => {
    setBatchQuantityDialog({ open: false, order: null, stageId: null, totalBatches: 0 })
    setBatchWeights([])
  }

  const updateBatchWeight = (index, value) => {
    const newWeights = [...batchWeights]
    newWeights[index] = value
    setBatchWeights(newWeights)
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-4">
            <img src="/logo-giudit.png" alt="Giudit Cosméticos" className="h-16 w-auto" />
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Sistema Kanban Giudit</h1>
              <p className="text-gray-600 mt-2">Sistema Kanban para controle de ordens de produção</p>
            </div>
          </div>
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button className="flex items-center gap-2">
                <Plus className="h-4 w-4" />
                Nova Ordem de Produção
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Criar Nova Ordem de Produção</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="sku">SKU</Label>
                  <Input
                    id="sku"
                    value={newOrder.sku}
                    onChange={(e) => handleSkuChange(e.target.value)}
                    placeholder="Digite o código SKU"
                    list="sku-suggestions"
                  />
                  <datalist id="sku-suggestions">
                    {Object.keys(productDatabase).map((sku) => (
                      <option key={sku} value={sku} />
                    ))}
                  </datalist>
                  {newOrder.sku && !productDatabase[newOrder.sku] && (
                    <p className="text-sm text-red-500 mt-1">SKU não encontrado no banco de dados</p>
                  )}
                </div>
                <div>
                  <Label htmlFor="description">Descrição do Produto</Label>
                  <Textarea
                    id="description"
                    value={newOrder.description}
                    onChange={(e) => setNewOrder({ ...newOrder, description: e.target.value })}
                    placeholder="Descrição será preenchida automaticamente ao inserir SKU válido"
                    className={productDatabase[newOrder.sku] ? "bg-green-50" : ""}
                  />
                  {productDatabase[newOrder.sku] && (
                    <p className="text-sm text-green-600 mt-1">✓ Descrição preenchida automaticamente</p>
                  )}
                </div>
                <div>
                  <Label htmlFor="quantity">Kilos</Label>
                  <Input
                    id="quantity"
                    type="number"
                    value={newOrder.quantity}
                    onChange={(e) => setNewOrder({ ...newOrder, quantity: e.target.value })}
                    placeholder="Digite os kilos"
                  />
                </div>
                <div>
                  <Label htmlFor="priority">Prioridade</Label>
                  <Select
                    value={newOrder.priority}
                    onValueChange={(value) => setNewOrder({ ...newOrder, priority: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Baixa</SelectItem>
                      <SelectItem value="medium">Média</SelectItem>
                      <SelectItem value="high">Alta</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="inicioProducao">Início de Produção</Label>
                  <Input
                    id="inicioProducao"
                    type="datetime-local"
                    value={newOrder.inicioProducao}
                    onChange={(e) => setNewOrder({ ...newOrder, inicioProducao: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="terminoProducao">Término de Produção</Label>
                  <Input
                    id="terminoProducao"
                    type="datetime-local"
                    value={newOrder.terminoProducao}
                    onChange={(e) => setNewOrder({ ...newOrder, terminoProducao: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="observacoes">Observações</Label>
                  <Textarea
                    id="observacoes"
                    value={newOrder.observacoes}
                    onChange={(e) => setNewOrder({ ...newOrder, observacoes: e.target.value })}
                    placeholder="Informações adicionais (opcional)"
                    rows={3}
                  />
                </div>
                <Button onClick={addNewOrder} className="w-full">
                  Criar Ordem
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        <DragDropContext onDragEnd={handleDragEnd}>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-6">
            {Object.values(stages).map((stage) => {
              const Icon = stageIcons[stage.id]
              return (
                <div key={stage.id} className="bg-white rounded-lg shadow-sm border">
                  <div className={`${stage.color} p-4 rounded-t-lg`}>
                    <div className="flex items-center gap-2">
                      <Icon className="h-5 w-5" />
                      <h3 className="font-semibold">{stage.title}</h3>
                      <Badge variant="secondary" className="ml-auto">
                        {stage.orders.length}
                      </Badge>
                    </div>
                  </div>
                  <Droppable droppableId={stage.id}>
                    {(provided, snapshot) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                        className={`p-4 min-h-[500px] ${snapshot.isDraggingOver ? "bg-gray-50" : ""}`}
                      >
                        {stage.orders.map((order, index) => (
                          <Draggable key={order.id} draggableId={order.id} index={index}>
                            {(provided, snapshot) => (
                              <Card
                                ref={provided.innerRef}
                                {...provided.draggableProps}
                                {...provided.dragHandleProps}
                                className={`mb-3 cursor-move ${snapshot.isDragging ? "shadow-lg" : ""} ${
                                  order.isBatch ? "border-l-4 border-l-orange-400" : ""
                                }`}
                                onDoubleClick={() => handleCardDoubleClick(order, stage.id)}
                              >
                                <CardHeader className="pb-2">
                                  <div className="flex justify-between items-start">
                                    <CardTitle className="text-sm font-medium">
                                      {order.sku}
                                      {order.isBatch && (
                                        <span className="ml-2 text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded">
                                          Batida {order.batchNumber}
                                        </span>
                                      )}
                                    </CardTitle>
                                    <div className="flex items-center gap-2">
                                      <div className={`w-2 h-2 rounded-full ${getPriorityColor(order.priority)}`} />
                                      <Button
                                        size="sm"
                                        variant="ghost"
                                        onClick={() => printLabel(order)}
                                        className="h-6 w-6 p-0"
                                      >
                                        <Printer className="h-3 w-3" />
                                      </Button>
                                      <Button
                                        size="sm"
                                        variant="ghost"
                                        onClick={() => openObservations(order, stage.id)}
                                        className={`h-6 w-6 p-0 ${order.observacoes ? "text-blue-600" : "text-gray-400"}`}
                                        title="Observações"
                                      >
                                        <MessageSquare className="h-3 w-3" />
                                      </Button>
                                      <Button
                                        size="sm"
                                        variant="ghost"
                                        onClick={() => confirmDelete(order.id, stage.id)}
                                        className="h-6 w-6 p-0 text-red-500 hover:text-red-700"
                                      >
                                        <Trash2 className="h-3 w-3" />
                                      </Button>
                                    </div>
                                  </div>
                                </CardHeader>
                                <CardContent className="pt-0">
                                  <p className="text-sm text-gray-600 mb-2">{order.description}</p>
                                  <div className="flex justify-between items-center text-xs text-gray-500 mb-1">
                                    <span>Kg: {order.quantity}</span>
                                    <span>{order.createdAt.toLocaleDateString()}</span>
                                  </div>
                                  {order.batchMultiple && !order.isBatch && (
                                    <div className="text-xs text-purple-600 mb-1">
                                      <span className="font-medium">Batidas: </span>
                                      <span>
                                        {order.totalBatches} (
                                        {order.batchWeights?.reduce((sum, weight) => sum + weight, 0)} kg total)
                                      </span>
                                    </div>
                                  )}
                                  {!order.isBatch && (
                                    <div className="flex items-center gap-2 mt-2">
                                      <input
                                        type="checkbox"
                                        id={`batch-${order.id}`}
                                        checked={order.batchMultiple || false}
                                        onChange={(e) => handleBatchMultipleChange(order, stage.id, e.target.checked)}
                                        className="w-3 h-3"
                                      />
                                      <label htmlFor={`batch-${order.id}`} className="text-xs text-gray-600">
                                        Batida múltipla
                                      </label>
                                    </div>
                                  )}
                                  {order.terminoProducao && (
                                    <div
                                      className={`text-xs mb-1 px-2 py-1 rounded ${getProductionDateStatus(order.terminoProducao)?.color || "text-gray-500"}`}
                                    >
                                      <span className="font-medium">Término: </span>
                                      <span>{order.terminoProducao.toLocaleDateString("pt-BR")}</span>
                                      {getProductionDateStatus(order.terminoProducao)?.status === "overdue" && (
                                        <span className="ml-1 font-bold">⚠️ ATRASADO</span>
                                      )}
                                      {getProductionDateStatus(order.terminoProducao)?.status === "today" && (
                                        <span className="ml-1 font-bold">📅 HOJE</span>
                                      )}
                                    </div>
                                  )}
                                  {order.operatorName && (
                                    <div className="text-xs text-blue-600">
                                      <span className="font-medium">Operador: </span>
                                      <span>{order.operatorName}</span>
                                    </div>
                                  )}
                                  {order.observacoes && (
                                    <div className="text-xs text-gray-600 mt-1 p-2 bg-gray-50 rounded">
                                      <span className="font-medium">Obs: </span>
                                      <span>{order.observacoes}</span>
                                    </div>
                                  )}
                                </CardContent>
                              </Card>
                            )}
                          </Draggable>
                        ))}
                        {provided.placeholder}
                      </div>
                    )}
                  </Droppable>
                </div>
              )
            })}
          </div>
        </DragDropContext>

        {/* Label Preview Dialog */}
        {selectedOrder && (
          <Dialog open={!!selectedOrder} onOpenChange={() => setSelectedOrder(null)}>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Etiqueta de Produção</DialogTitle>
              </DialogHeader>
              <div className="border-2 border-dashed border-gray-300 p-6 bg-white print-area">
                <div className="text-center space-y-3">
                  <div className="border-b pb-2">
                    <h3 className="font-bold text-lg">ORDEM DE PRODUÇÃO</h3>
                  </div>
                  <div className="space-y-2 text-left">
                    <div className="flex justify-between">
                      <span className="font-semibold">SKU:</span>
                      <span className="font-mono">{selectedOrder.sku}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="font-semibold">Produto:</span>
                      <span className="text-right max-w-[200px]">{selectedOrder.description}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="font-semibold">Kilos:</span>
                      <span className="font-mono">{selectedOrder.quantity}</span>
                    </div>
                    {selectedOrder.isBatch && (
                      <div className="flex justify-between">
                        <span className="font-semibold">Batida:</span>
                        <span className="font-mono">{selectedOrder.batchNumber}</span>
                      </div>
                    )}
                    <div className="flex justify-between">
                      <span className="font-semibold">Etapa:</span>
                      <span className="capitalize">{selectedOrder.stage.replace("-", " ")}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="font-semibold">Início de Produção:</span>
                      <span>
                        {selectedOrder.inicioProducao
                          ? selectedOrder.inicioProducao.toLocaleDateString("pt-BR") +
                            " " +
                            selectedOrder.inicioProducao.toLocaleTimeString("pt-BR", {
                              hour: "2-digit",
                              minute: "2-digit",
                            })
                          : "Não definido"}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="font-semibold">Término de Produção:</span>
                      <span>
                        {selectedOrder.terminoProducao
                          ? selectedOrder.terminoProducao.toLocaleDateString("pt-BR") +
                            " " +
                            selectedOrder.terminoProducao.toLocaleTimeString("pt-BR", {
                              hour: "2-digit",
                              minute: "2-digit",
                            })
                          : "Não definido"}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="font-semibold">Data de Criação:</span>
                      <span>{selectedOrder.createdAt.toLocaleDateString("pt-BR")}</span>
                    </div>
                  </div>
                  <div className="border-t pt-2">
                    <div className="text-xs text-gray-500">ID da Ordem: {selectedOrder.id}</div>
                  </div>
                </div>
              </div>
              <div className="flex gap-2">
                <Button onClick={() => window.print()} className="flex-1">
                  <Printer className="h-4 w-4 mr-2" />
                  Imprimir Etiqueta
                </Button>
                <Button variant="outline" onClick={() => setSelectedOrder(null)}>
                  Fechar
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        )}
        {/* Delete Confirmation Dialog */}
        {orderToDelete && (
          <Dialog open={!!orderToDelete} onOpenChange={() => setOrderToDelete(null)}>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Confirmar Exclusão</DialogTitle>
              </DialogHeader>
              <div className="py-4">
                <p className="text-center text-gray-700">Deseja realmente excluir esse cartão?</p>
              </div>
              <div className="flex gap-2 justify-end">
                <Button variant="outline" onClick={cancelDelete}>
                  Não
                </Button>
                <Button variant="destructive" onClick={deleteOrder}>
                  Sim
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        )}

        {/* Operator Name Dialog */}
        {operatorDialog.open && (
          <Dialog
            open={operatorDialog.open}
            onOpenChange={() =>
              setOperatorDialog({ open: false, order: null, sourceStage: null, destStage: null, destIndex: null })
            }
          >
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Nome do Operador</DialogTitle>
              </DialogHeader>
              <div className="py-4">
                <Label htmlFor="operatorName">Digite o nome do operador responsável:</Label>
                <Input
                  id="operatorName"
                  value={operatorName}
                  onChange={(e) => setOperatorName(e.target.value)}
                  placeholder="Nome do operador"
                  className="mt-2"
                  onKeyPress={(e) => {
                    if (e.key === "Enter" && operatorName.trim()) {
                      confirmOperator()
                    }
                  }}
                />
              </div>
              <div className="flex gap-2 justify-end">
                <Button variant="outline" onClick={cancelOperator}>
                  Cancelar
                </Button>
                <Button onClick={confirmOperator} disabled={!operatorName.trim()}>
                  Confirmar
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        )}

        {/* Observations Dialog */}
        {observationsDialog.open && (
          <Dialog
            open={observationsDialog.open}
            onOpenChange={() => setObservationsDialog({ open: false, order: null, stageId: null })}
          >
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Observações</DialogTitle>
              </DialogHeader>
              <div className="py-4">
                <Label htmlFor="observations">Digite as observações para este pedido:</Label>
                <Textarea
                  id="observations"
                  value={observations}
                  onChange={(e) => setObservations(e.target.value)}
                  placeholder="Informações relevantes, instruções especiais, etc."
                  className="mt-2"
                  rows={4}
                />
              </div>
              <div className="flex gap-2 justify-end">
                <Button variant="outline" onClick={cancelObservations}>
                  Cancelar
                </Button>
                <Button onClick={saveObservations}>Salvar</Button>
              </div>
            </DialogContent>
          </Dialog>
        )}

        {/* Edit Order Dialog */}
        {editDialog.open && (
          <Dialog
            open={editDialog.open}
            onOpenChange={() => setEditDialog({ open: false, order: null, stageId: null })}
          >
            <DialogContent className="sm:max-w-md max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Editar Ordem de Produção</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <Label htmlFor="edit-sku">SKU</Label>
                  <Input
                    id="edit-sku"
                    value={editOrder.sku}
                    onChange={(e) => handleEditSkuChange(e.target.value)}
                    placeholder="Digite o código SKU"
                    list="edit-sku-suggestions"
                  />
                  <datalist id="edit-sku-suggestions">
                    {Object.keys(productDatabase).map((sku) => (
                      <option key={sku} value={sku} />
                    ))}
                  </datalist>
                  {editOrder.sku && !productDatabase[editOrder.sku] && (
                    <p className="text-sm text-red-500 mt-1">SKU não encontrado no banco de dados</p>
                  )}
                </div>
                <div>
                  <Label htmlFor="edit-description">Descrição do Produto</Label>
                  <Textarea
                    id="edit-description"
                    value={editOrder.description}
                    onChange={(e) => setEditOrder({ ...editOrder, description: e.target.value })}
                    placeholder="Descrição será preenchida automaticamente ao inserir SKU válido"
                    className={productDatabase[editOrder.sku] ? "bg-green-50" : ""}
                  />
                  {productDatabase[editOrder.sku] && (
                    <p className="text-sm text-green-600 mt-1">✓ Descrição preenchida automaticamente</p>
                  )}
                </div>
                <div>
                  <Label htmlFor="edit-quantity">Kilos</Label>
                  <Input
                    id="edit-quantity"
                    type="number"
                    value={editOrder.quantity}
                    onChange={(e) => setEditOrder({ ...editOrder, quantity: e.target.value })}
                    placeholder="Digite os kilos"
                  />
                </div>
                <div>
                  <Label htmlFor="edit-priority">Prioridade</Label>
                  <Select
                    value={editOrder.priority}
                    onValueChange={(value) => setEditOrder({ ...editOrder, priority: value })}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">Baixa</SelectItem>
                      <SelectItem value="medium">Média</SelectItem>
                      <SelectItem value="high">Alta</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="edit-inicioProducao">Início de Produção</Label>
                  <Input
                    id="edit-inicioProducao"
                    type="datetime-local"
                    value={editOrder.inicioProducao}
                    onChange={(e) => setEditOrder({ ...editOrder, inicioProducao: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-terminoProducao">Término de Produção</Label>
                  <Input
                    id="edit-terminoProducao"
                    type="datetime-local"
                    value={editOrder.terminoProducao}
                    onChange={(e) => setEditOrder({ ...editOrder, terminoProducao: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="edit-observacoes">Observações</Label>
                  <Textarea
                    id="edit-observacoes"
                    value={editOrder.observacoes}
                    onChange={(e) => setEditOrder({ ...editOrder, observacoes: e.target.value })}
                    placeholder="Informações adicionais (opcional)"
                    rows={3}
                  />
                </div>
                <div className="flex gap-2 justify-end">
                  <Button variant="outline" onClick={cancelEditOrder}>
                    Cancelar
                  </Button>
                  <Button onClick={saveEditOrder}>Salvar Alterações</Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        )}

        {/* Batch Quantity Dialog */}
        {batchDialog.open && (
          <Dialog
            open={batchDialog.open}
            onOpenChange={() => setBatchDialog({ open: false, order: null, stageId: null })}
          >
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle>Quantidade de Batidas</DialogTitle>
              </DialogHeader>
              <div className="py-4">
                <Label htmlFor="batchQuantity">Quantas batidas serão produzidas?</Label>
                <Input
                  id="batchQuantity"
                  type="number"
                  min="1"
                  value={batchQuantity}
                  onChange={(e) => setBatchQuantity(e.target.value)}
                  placeholder="Digite a quantidade de batidas"
                  className="mt-2"
                  onKeyPress={(e) => {
                    if (e.key === "Enter" && batchQuantity && Number.parseInt(batchQuantity) > 0) {
                      confirmBatchQuantity()
                    }
                  }}
                />
              </div>
              <div className="flex gap-2 justify-end">
                <Button variant="outline" onClick={cancelBatchQuantity}>
                  Cancelar
                </Button>
                <Button onClick={confirmBatchQuantity} disabled={!batchQuantity || Number.parseInt(batchQuantity) <= 0}>
                  Continuar
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        )}

        {/* Batch Weights Dialog */}
        {batchQuantityDialog.open && (
          <Dialog
            open={batchQuantityDialog.open}
            onOpenChange={() => setBatchQuantityDialog({ open: false, order: null, stageId: null, totalBatches: 0 })}
          >
            <DialogContent className="sm:max-w-md max-h-[80vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Peso de Cada Batida</DialogTitle>
              </DialogHeader>
              <div className="py-4 space-y-4">
                <p className="text-sm text-gray-600">
                  Defina o peso em kilos para cada uma das {batchQuantityDialog.totalBatches} batidas:
                </p>
                <div className="text-sm text-gray-600 bg-blue-50 p-2 rounded">
                  <span className="font-medium">Quantidade original: </span>
                  <span>{batchQuantityDialog.order?.quantity} kg</span>
                </div>
                {Array.from({ length: batchQuantityDialog.totalBatches }, (_, index) => (
                  <div key={index}>
                    <Label htmlFor={`batch-weight-${index}`}>Batida {index + 1} (Kilos)</Label>
                    <Input
                      id={`batch-weight-${index}`}
                      type="number"
                      step="0.1"
                      min="0.1"
                      value={batchWeights[index] || ""}
                      onChange={(e) => updateBatchWeight(index, e.target.value)}
                      placeholder="Digite o peso em kilos"
                      className="mt-1"
                    />
                  </div>
                ))}
                {batchWeights.length > 0 && batchWeights.some((weight) => weight) && (
                  <div className="space-y-2">
                    <div className="text-sm text-blue-600 font-medium">
                      Total das batidas:{" "}
                      {batchWeights.reduce((sum, weight) => sum + (Number.parseFloat(weight) || 0), 0).toFixed(1)} kg
                    </div>
                    {batchWeights.reduce((sum, weight) => sum + (Number.parseFloat(weight) || 0), 0) >
                      (batchQuantityDialog.order?.quantity || 0) && (
                      <div className="text-sm text-red-600 font-medium bg-red-50 p-2 rounded border border-red-200">
                        ⚠️ Qtde maior que a demanda
                      </div>
                    )}
                  </div>
                )}
              </div>
              <div className="flex gap-2 justify-end">
                <Button variant="outline" onClick={cancelBatchWeights}>
                  Cancelar
                </Button>
                <Button
                  onClick={saveBatchWeights}
                  disabled={
                    batchWeights.some((weight) => !weight || Number.parseFloat(weight) <= 0) ||
                    batchWeights.reduce((sum, weight) => sum + (Number.parseFloat(weight) || 0), 0) >
                      (batchQuantityDialog.order?.quantity || 0)
                  }
                >
                  Salvar Batidas
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        )}
      </div>
    </div>
  )
}

export default KanbanProductionSystem
